{
  "address": "0xc57f67567bF2BEA03945C8727979845c80cc2B0B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_certificate_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_certificate_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "collection",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_person_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_person_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_claimer",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "collection",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "name": "create_certificate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "name": "login_person",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "name": "register_person",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testing",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_claimer",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "number",
          "type": "string"
        }
      ],
      "name": "validate_certificate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xef24210961985b979a8f380b896a4fdd5ec03fb73723cdfda06f58d179190a4d",
  "receipt": {
    "to": null,
    "from": "0x168e007d9f5a794794E40035C5214963cb16BFB7",
    "contractAddress": "0xc57f67567bF2BEA03945C8727979845c80cc2B0B",
    "transactionIndex": 0,
    "gasUsed": "3240152",
    "logsBloom": "0x
    "blockHash": "0x816e8f776a095809cd72e80304aef975352137f10edc56e956b36a07621e8f5a",
    "transactionHash": "0xef24210961985b979a8f380b896a4fdd5ec03fb73723cdfda06f58d179190a4d",
    "logs": [],
    "blockNumber": 14119364,
    "cumulativeGasUsed": "3240152",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CELO",
    "CELO"
  ],
  "numDeployments": 4,
  "solcInputHash": "12c02619f50ea5b9e78106b6df8009a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_certificate_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_certificate_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collection\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_person_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_person_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_claimer\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collection\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"name\":\"create_certificate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"login_person\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"register_person\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testing\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_claimer\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"}],\"name\":\"validate_certificate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CeloERC721.sol\":\"CeloERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CeloERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract CeloERC721 is ERC721 {\\r\\n\\r\\n    //Certificate Struct\\r\\n    struct certificate_struct {\\r\\n        string wallet;\\r\\n        string number;\\r\\n        uint256 price;\\r\\n        string location;\\r\\n        string description;\\r\\n        string collection;\\r\\n        string date;\\r\\n        string image;\\r\\n    }\\r\\n   //Person Struct\\r\\n    struct person_struct {\\r\\n        uint256 userid;\\r\\n        string username;\\r\\n        string email;\\r\\n        string password;\\r\\n    }\\r\\n    \\r\\n    uint256 public _certificate_ids;\\r\\n    uint256 public _person_ids;\\r\\n    mapping(uint256 => certificate_struct) public _certificate_uris; //_certificate_ids => (Certificate) certificate_struct\\r\\n    mapping(uint256 => person_struct) public _person_uris; //_person_ids => (Person) person_struct\\r\\n\\r\\n    constructor(string memory name, string memory symbol)\\r\\n        ERC721(name, symbol)\\r\\n    {}\\r\\n\\r\\n    //Certificate\\r\\n    function create_certificate(string memory _claimer,  string memory number, uint256 price,string memory location,string memory description,string memory collection,string memory date, string memory image)\\r\\n        public\\r\\n        returns (uint256)\\r\\n    {\\r\\n        //Create Certificates into _certificate_uris\\r\\n        _certificate_uris[_certificate_ids] = certificate_struct(_claimer, number, price, location, description, collection, date, image );\\r\\n        _certificate_ids++;\\r\\n\\r\\n        return _certificate_ids;\\r\\n    }\\r\\n\\r\\n    function validate_certificate(string memory _claimer,  string memory number)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        for (uint256 i = 0; i < _certificate_ids; i++){\\r\\n           if (keccak256(bytes(_claimer)) == keccak256(bytes(_certificate_uris[i].wallet)) && (keccak256(bytes(number))) == (keccak256(bytes(_certificate_uris[i].number)))){\\r\\n                return Strings.toString(i);\\r\\n           }\\t\\t\\t\\t\\r\\n        }\\r\\n        return \\\"false\\\";\\r\\n    }\\r\\n\\r\\n\\r\\n    //Person\\r\\n    function register_person(string memory username, string memory email, string memory password) public returns (uint256){\\r\\n        //Regsiter person into _person_uris\\r\\n        _person_uris[_person_ids] = person_struct(_person_ids,username,email,password );\\r\\n        _person_ids++;\\r\\n\\r\\n        return _person_ids; \\r\\n    }\\r\\n\\r\\n    function login_person(string memory email,  string memory password)public view returns (string memory){\\r\\n        for (uint256 i = 0; i < _person_ids; i++){\\r\\n           if (keccak256(bytes(email)) == keccak256(bytes(_person_uris[i].email)) && (keccak256(bytes(password))) == (keccak256(bytes(_person_uris[i].password)))){\\r\\n                return Strings.toString(i);\\r\\n           }\\t\\t\\t\\t\\r\\n        }\\r\\n        return \\\"false\\\";\\r\\n    }\\r\\n\\r\\n   \\r\\n    function reset_all() public {\\r\\n      _certificate_ids = 0;\\r\\n      _person_ids = 0;\\r\\n      for (uint256 i = 0; i < _certificate_ids; i++)    delete _certificate_uris[i];\\r\\n      for (uint256 i = 0; i < _person_ids; i++)    delete _person_uris[i];\\r\\n    }\\r\\n\\r\\n  function testing() public returns (string memory){\\r\\n    create_certificate(\\\"0x168e007d9f5a794794e40035c5214963cb16bfb7\\\",\\\"35\\\", 300,\\\"Dhaka\\\",\\\"A T-shirt with the width of 5 \\\\\\\" and height of 7\\\\\\\" and a bag of 40 celo\\\",\\\"T-shirt, bag\\\",\\\"2022-10-13T04:06\\\",\\\"image url\\\");\\r\\n    return validate_certificate(\\\"0x168e007d9f5a794794e40035c5214963cb16bfb7\\\",\\\"35\\\");\\r\\n  }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xc87847a2e49decb75802d7631418f14ff88594e8add8da6f60a29594c7d8ab14\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003c9338038062003c938339818101604052810190620000379190620001a3565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6138d780620003bc6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063a22cb4651161007c578063a22cb465146103f3578063b16060a61461040f578063b88d4fde14610419578063c87b56dd14610435578063da41429114610465578063e985e9c5146104985761014d565b806370a082311461031b5780637a5cba991461034b5780638c7e7f65146103695780638d03b102146103995780638e26c087146103b757806395d89b41146103d55761014d565b806313e4cfaf1161011557806313e4cfaf1461021c5780631b860d751461024c57806323b872dd1461027c57806342842e0e146102985780635658ccb6146102b45780636352211e146102eb5761014d565b806301ffc9a71461015257806306fdde0314610182578063081812fc146101a0578063095ea7b3146101d057806311fd3bba146101ec575b600080fd5b61016c6004803603810190610167919061266a565b6104c8565b6040516101799190612d1f565b60405180910390f35b61018a6105aa565b6040516101979190612d3a565b60405180910390f35b6101ba60048036038101906101b5919061295d565b61063c565b6040516101c79190612cb8565b60405180910390f35b6101ea60048036038101906101e5919061262a565b6106c1565b005b610206600480360381019061020191906126c4565b6107d9565b6040516102139190612d3a565b60405180910390f35b610236600480360381019061023191906127e3565b6108c1565b6040516102439190612f8b565b60405180910390f35b610266600480360381019061026191906126c4565b610a13565b6040516102739190612d3a565b60405180910390f35b61029660048036038101906102919190612514565b610afb565b005b6102b260048036038101906102ad9190612514565b610b5b565b005b6102ce60048036038101906102c9919061295d565b610b7b565b6040516102e2989796959493929190612d5c565b60405180910390f35b6103056004803603810190610300919061295d565b610f7b565b6040516103129190612cb8565b60405180910390f35b610335600480360381019061033091906124a7565b61102d565b6040516103429190612f8b565b60405180910390f35b6103536110e5565b6040516103609190612f8b565b60405180910390f35b610383600480360381019061037e919061273c565b6110eb565b6040516103909190612f8b565b60405180910390f35b6103a16111ad565b6040516103ae9190612d3a565b60405180910390f35b6103bf611357565b6040516103cc9190612f8b565b60405180910390f35b6103dd61135d565b6040516103ea9190612d3a565b60405180910390f35b61040d600480360381019061040891906125ea565b6113ef565b005b610417611405565b005b610433600480360381019061042e9190612567565b611535565b005b61044f600480360381019061044a919061295d565b611597565b60405161045c9190612d3a565b60405180910390f35b61047f600480360381019061047a919061295d565b61163e565b60405161048f9493929190612fa6565b60405180910390f35b6104b260048036038101906104ad91906124d4565b611806565b6040516104bf9190612d1f565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061059357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105a357506105a28261189a565b5b9050919050565b6060600080546105b99061325b565b80601f01602080910402602001604051908101604052809291908181526020018280546105e59061325b565b80156106325780601f1061060757610100808354040283529160200191610632565b820191906000526020600020905b81548152906001019060200180831161061557829003601f168201915b5050505050905090565b600061064782611904565b610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90612f0b565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106cc82610f7b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490612f4b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661075c611970565b73ffffffffffffffffffffffffffffffffffffffff16148061078b575061078a81610785611970565b611806565b5b6107ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c190612eab565b60405180910390fd5b6107d48383611978565b505050565b606060005b600754811015610881576009600082815260200190815260200160002060020160405161080b9190612c7d565b604051809103902084805190602001201480156108585750600960008281526020019081526020016000206003016040516108469190612c7d565b60405180910390208380519060200120145b1561086e5761086681611a31565b9150506108bb565b8080610879906132be565b9150506107de565b506040518060400160405280600581526020017f66616c736500000000000000000000000000000000000000000000000000000081525090505b92915050565b60006040518061010001604052808a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815250600860006006548152602001908152602001600020600082015181600001908051906020019061092e92919061227b565b50602082015181600101908051906020019061094b92919061227b565b5060408201518160020155606082015181600301908051906020019061097292919061227b565b50608082015181600401908051906020019061098f92919061227b565b5060a08201518160050190805190602001906109ac92919061227b565b5060c08201518160060190805190602001906109c992919061227b565b5060e08201518160070190805190602001906109e692919061227b565b50905050600660008154809291906109fd906132be565b9190505550600654905098975050505050505050565b606060005b600654811015610abb5760086000828152602001908152602001600020600001604051610a459190612c7d565b60405180910390208480519060200120148015610a92575060086000828152602001908152602001600020600101604051610a809190612c7d565b60405180910390208380519060200120145b15610aa857610aa081611a31565b915050610af5565b8080610ab3906132be565b915050610a18565b506040518060400160405280600581526020017f66616c736500000000000000000000000000000000000000000000000000000081525090505b92915050565b610b0c610b06611970565b82611b92565b610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4290612f6b565b60405180910390fd5b610b56838383611c70565b505050565b610b7683838360405180602001604052806000815250611535565b505050565b6008602052806000526040600020600091509050806000018054610b9e9061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610bca9061325b565b8015610c175780601f10610bec57610100808354040283529160200191610c17565b820191906000526020600020905b815481529060010190602001808311610bfa57829003601f168201915b505050505090806001018054610c2c9061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c589061325b565b8015610ca55780601f10610c7a57610100808354040283529160200191610ca5565b820191906000526020600020905b815481529060010190602001808311610c8857829003601f168201915b505050505090806002015490806003018054610cc09061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610cec9061325b565b8015610d395780601f10610d0e57610100808354040283529160200191610d39565b820191906000526020600020905b815481529060010190602001808311610d1c57829003601f168201915b505050505090806004018054610d4e9061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7a9061325b565b8015610dc75780601f10610d9c57610100808354040283529160200191610dc7565b820191906000526020600020905b815481529060010190602001808311610daa57829003601f168201915b505050505090806005018054610ddc9061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e089061325b565b8015610e555780601f10610e2a57610100808354040283529160200191610e55565b820191906000526020600020905b815481529060010190602001808311610e3857829003601f168201915b505050505090806006018054610e6a9061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e969061325b565b8015610ee35780601f10610eb857610100808354040283529160200191610ee3565b820191906000526020600020905b815481529060010190602001808311610ec657829003601f168201915b505050505090806007018054610ef89061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f249061325b565b8015610f715780601f10610f4657610100808354040283529160200191610f71565b820191906000526020600020905b815481529060010190602001808311610f5457829003601f168201915b5050505050905088565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101b90612eeb565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561109e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109590612ecb565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60075481565b6000604051806080016040528060075481526020018581526020018481526020018381525060096000600754815260200190815260200160002060008201518160000155602082015181600101908051906020019061114b92919061227b565b50604082015181600201908051906020019061116892919061227b565b50606082015181600301908051906020019061118592919061227b565b509050506007600081548092919061119c906132be565b919050555060075490509392505050565b60606112fa6040518060600160405280602a8152602001613878602a91396040518060400160405280600281526020017f333500000000000000000000000000000000000000000000000000000000000081525061012c6040518060400160405280600581526020017f4468616b61000000000000000000000000000000000000000000000000000000815250604051806080016040528060458152602001613833604591396040518060400160405280600c81526020017f542d73686972742c2062616700000000000000000000000000000000000000008152506040518060400160405280601081526020017f323032322d31302d31335430343a3036000000000000000000000000000000008152506040518060400160405280600981526020017f696d6167652075726c00000000000000000000000000000000000000000000008152506108c1565b506113526040518060600160405280602a8152602001613878602a91396040518060400160405280600281526020017f3335000000000000000000000000000000000000000000000000000000000000815250610a13565b905090565b60065481565b60606001805461136c9061325b565b80601f01602080910402602001604051908101604052809291908181526020018280546113989061325b565b80156113e55780601f106113ba576101008083540402835291602001916113e5565b820191906000526020600020905b8154815290600101906020018083116113c857829003601f168201915b5050505050905090565b6114016113fa611970565b8383611ed7565b5050565b6000600681905550600060078190555060005b6006548110156114c35760086000828152602001908152602001600020600080820160006114469190612301565b6001820160006114569190612301565b600282016000905560038201600061146e9190612301565b60048201600061147e9190612301565b60058201600061148e9190612301565b60068201600061149e9190612301565b6007820160006114ae9190612301565b505080806114bb906132be565b915050611418565b5060005b60075481101561153257600960008281526020019081526020016000206000808201600090556001820160006114fd9190612301565b60028201600061150d9190612301565b60038201600061151d9190612301565b5050808061152a906132be565b9150506114c7565b50565b611546611540611970565b83611b92565b611585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157c90612f6b565b60405180910390fd5b61159184848484612044565b50505050565b60606115a282611904565b6115e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d890612f2b565b60405180910390fd5b60006115eb6120a0565b9050600081511161160b5760405180602001604052806000815250611636565b8061161584611a31565b604051602001611626929190612c94565b6040516020818303038152906040525b915050919050565b60096020528060005260406000206000915090508060000154908060010180546116679061325b565b80601f01602080910402602001604051908101604052809291908181526020018280546116939061325b565b80156116e05780601f106116b5576101008083540402835291602001916116e0565b820191906000526020600020905b8154815290600101906020018083116116c357829003601f168201915b5050505050908060020180546116f59061325b565b80601f01602080910402602001604051908101604052809291908181526020018280546117219061325b565b801561176e5780601f106117435761010080835404028352916020019161176e565b820191906000526020600020905b81548152906001019060200180831161175157829003601f168201915b5050505050908060030180546117839061325b565b80601f01602080910402602001604051908101604052809291908181526020018280546117af9061325b565b80156117fc5780601f106117d1576101008083540402835291602001916117fc565b820191906000526020600020905b8154815290600101906020018083116117df57829003601f168201915b5050505050905084565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166119eb83610f7b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60606000821415611a79576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611b8d565b600082905060005b60008214611aab578080611a94906132be565b915050600a82611aa49190613140565b9150611a81565b60008167ffffffffffffffff811115611ac757611ac66133f4565b5b6040519080825280601f01601f191660200182016040528015611af95781602001600182028036833780820191505090505b5090505b60008514611b8657600182611b129190613171565b9150600a85611b219190613307565b6030611b2d91906130ea565b60f81b818381518110611b4357611b426133c5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611b7f9190613140565b9450611afd565b8093505050505b919050565b6000611b9d82611904565b611bdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd390612e8b565b60405180910390fd5b6000611be783610f7b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611c295750611c288185611806565b5b80611c6757508373ffffffffffffffffffffffffffffffffffffffff16611c4f8461063c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611c9082610f7b565b73ffffffffffffffffffffffffffffffffffffffff1614611ce6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdd90612e2b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4d90612e4b565b60405180910390fd5b611d618383836120b7565b611d6c600082611978565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611dbc9190613171565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e1391906130ea565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ed28383836120bc565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3d90612e6b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516120379190612d1f565b60405180910390a3505050565b61204f848484611c70565b61205b848484846120c1565b61209a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209190612e0b565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b505050565b505050565b60006120e28473ffffffffffffffffffffffffffffffffffffffff16612258565b1561224b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261210b611970565b8786866040518563ffffffff1660e01b815260040161212d9493929190612cd3565b602060405180830381600087803b15801561214757600080fd5b505af192505050801561217857506040513d601f19601f820116820180604052508101906121759190612697565b60015b6121fb573d80600081146121a8576040519150601f19603f3d011682016040523d82523d6000602084013e6121ad565b606091505b506000815114156121f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ea90612e0b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612250565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546122879061325b565b90600052602060002090601f0160209004810192826122a957600085556122f0565b82601f106122c257805160ff19168380011785556122f0565b828001600101855582156122f0579182015b828111156122ef5782518255916020019190600101906122d4565b5b5090506122fd9190612341565b5090565b50805461230d9061325b565b6000825580601f1061231f575061233e565b601f01602090049060005260206000209081019061233d9190612341565b5b50565b5b8082111561235a576000816000905550600101612342565b5090565b600061237161236c84613025565b613000565b90508281526020810184848401111561238d5761238c613428565b5b612398848285613219565b509392505050565b60006123b36123ae84613056565b613000565b9050828152602081018484840111156123cf576123ce613428565b5b6123da848285613219565b509392505050565b6000813590506123f1816137d6565b92915050565b600081359050612406816137ed565b92915050565b60008135905061241b81613804565b92915050565b60008151905061243081613804565b92915050565b600082601f83011261244b5761244a613423565b5b813561245b84826020860161235e565b91505092915050565b600082601f83011261247957612478613423565b5b81356124898482602086016123a0565b91505092915050565b6000813590506124a18161381b565b92915050565b6000602082840312156124bd576124bc613432565b5b60006124cb848285016123e2565b91505092915050565b600080604083850312156124eb576124ea613432565b5b60006124f9858286016123e2565b925050602061250a858286016123e2565b9150509250929050565b60008060006060848603121561252d5761252c613432565b5b600061253b868287016123e2565b935050602061254c868287016123e2565b925050604061255d86828701612492565b9150509250925092565b6000806000806080858703121561258157612580613432565b5b600061258f878288016123e2565b94505060206125a0878288016123e2565b93505060406125b187828801612492565b925050606085013567ffffffffffffffff8111156125d2576125d161342d565b5b6125de87828801612436565b91505092959194509250565b6000806040838503121561260157612600613432565b5b600061260f858286016123e2565b9250506020612620858286016123f7565b9150509250929050565b6000806040838503121561264157612640613432565b5b600061264f858286016123e2565b925050602061266085828601612492565b9150509250929050565b6000602082840312156126805761267f613432565b5b600061268e8482850161240c565b91505092915050565b6000602082840312156126ad576126ac613432565b5b60006126bb84828501612421565b91505092915050565b600080604083850312156126db576126da613432565b5b600083013567ffffffffffffffff8111156126f9576126f861342d565b5b61270585828601612464565b925050602083013567ffffffffffffffff8111156127265761272561342d565b5b61273285828601612464565b9150509250929050565b60008060006060848603121561275557612754613432565b5b600084013567ffffffffffffffff8111156127735761277261342d565b5b61277f86828701612464565b935050602084013567ffffffffffffffff8111156127a05761279f61342d565b5b6127ac86828701612464565b925050604084013567ffffffffffffffff8111156127cd576127cc61342d565b5b6127d986828701612464565b9150509250925092565b600080600080600080600080610100898b03121561280457612803613432565b5b600089013567ffffffffffffffff8111156128225761282161342d565b5b61282e8b828c01612464565b985050602089013567ffffffffffffffff81111561284f5761284e61342d565b5b61285b8b828c01612464565b975050604061286c8b828c01612492565b965050606089013567ffffffffffffffff81111561288d5761288c61342d565b5b6128998b828c01612464565b955050608089013567ffffffffffffffff8111156128ba576128b961342d565b5b6128c68b828c01612464565b94505060a089013567ffffffffffffffff8111156128e7576128e661342d565b5b6128f38b828c01612464565b93505060c089013567ffffffffffffffff8111156129145761291361342d565b5b6129208b828c01612464565b92505060e089013567ffffffffffffffff8111156129415761294061342d565b5b61294d8b828c01612464565b9150509295985092959890939650565b60006020828403121561297357612972613432565b5b600061298184828501612492565b91505092915050565b612993816131a5565b82525050565b6129a2816131b7565b82525050565b60006129b38261309c565b6129bd81856130b2565b93506129cd818560208601613228565b6129d681613437565b840191505092915050565b600081546129ee8161325b565b6129f881866130c3565b94506001821660008114612a135760018114612a2457612a57565b60ff19831686528186019350612a57565b612a2d85613087565b60005b83811015612a4f57815481890152600182019150602081019050612a30565b838801955050505b50505092915050565b6000612a6b826130a7565b612a7581856130ce565b9350612a85818560208601613228565b612a8e81613437565b840191505092915050565b6000612aa4826130a7565b612aae81856130df565b9350612abe818560208601613228565b80840191505092915050565b6000612ad76032836130ce565b9150612ae282613448565b604082019050919050565b6000612afa6025836130ce565b9150612b0582613497565b604082019050919050565b6000612b1d6024836130ce565b9150612b28826134e6565b604082019050919050565b6000612b406019836130ce565b9150612b4b82613535565b602082019050919050565b6000612b63602c836130ce565b9150612b6e8261355e565b604082019050919050565b6000612b866038836130ce565b9150612b91826135ad565b604082019050919050565b6000612ba9602a836130ce565b9150612bb4826135fc565b604082019050919050565b6000612bcc6029836130ce565b9150612bd78261364b565b604082019050919050565b6000612bef602c836130ce565b9150612bfa8261369a565b604082019050919050565b6000612c12602f836130ce565b9150612c1d826136e9565b604082019050919050565b6000612c356021836130ce565b9150612c4082613738565b604082019050919050565b6000612c586031836130ce565b9150612c6382613787565b604082019050919050565b612c778161320f565b82525050565b6000612c8982846129e1565b915081905092915050565b6000612ca08285612a99565b9150612cac8284612a99565b91508190509392505050565b6000602082019050612ccd600083018461298a565b92915050565b6000608082019050612ce8600083018761298a565b612cf5602083018661298a565b612d026040830185612c6e565b8181036060830152612d1481846129a8565b905095945050505050565b6000602082019050612d346000830184612999565b92915050565b60006020820190508181036000830152612d548184612a60565b905092915050565b6000610100820190508181036000830152612d77818b612a60565b90508181036020830152612d8b818a612a60565b9050612d9a6040830189612c6e565b8181036060830152612dac8188612a60565b90508181036080830152612dc08187612a60565b905081810360a0830152612dd48186612a60565b905081810360c0830152612de88185612a60565b905081810360e0830152612dfc8184612a60565b90509998505050505050505050565b60006020820190508181036000830152612e2481612aca565b9050919050565b60006020820190508181036000830152612e4481612aed565b9050919050565b60006020820190508181036000830152612e6481612b10565b9050919050565b60006020820190508181036000830152612e8481612b33565b9050919050565b60006020820190508181036000830152612ea481612b56565b9050919050565b60006020820190508181036000830152612ec481612b79565b9050919050565b60006020820190508181036000830152612ee481612b9c565b9050919050565b60006020820190508181036000830152612f0481612bbf565b9050919050565b60006020820190508181036000830152612f2481612be2565b9050919050565b60006020820190508181036000830152612f4481612c05565b9050919050565b60006020820190508181036000830152612f6481612c28565b9050919050565b60006020820190508181036000830152612f8481612c4b565b9050919050565b6000602082019050612fa06000830184612c6e565b92915050565b6000608082019050612fbb6000830187612c6e565b8181036020830152612fcd8186612a60565b90508181036040830152612fe18185612a60565b90508181036060830152612ff58184612a60565b905095945050505050565b600061300a61301b565b9050613016828261328d565b919050565b6000604051905090565b600067ffffffffffffffff8211156130405761303f6133f4565b5b61304982613437565b9050602081019050919050565b600067ffffffffffffffff821115613071576130706133f4565b5b61307a82613437565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006130f58261320f565b91506131008361320f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561313557613134613338565b5b828201905092915050565b600061314b8261320f565b91506131568361320f565b92508261316657613165613367565b5b828204905092915050565b600061317c8261320f565b91506131878361320f565b92508282101561319a57613199613338565b5b828203905092915050565b60006131b0826131ef565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561324657808201518184015260208101905061322b565b83811115613255576000848401525b50505050565b6000600282049050600182168061327357607f821691505b6020821081141561328757613286613396565b5b50919050565b61329682613437565b810181811067ffffffffffffffff821117156132b5576132b46133f4565b5b80604052505050565b60006132c98261320f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132fc576132fb613338565b5b600182019050919050565b60006133128261320f565b915061331d8361320f565b92508261332d5761332c613367565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6137df816131a5565b81146137ea57600080fd5b50565b6137f6816131b7565b811461380157600080fd5b50565b61380d816131c3565b811461381857600080fd5b50565b6138248161320f565b811461382f57600080fd5b5056fe4120542d7368697274207769746820746865207769647468206f662035202220616e6420686569676874206f6620372220616e64206120626167206f662034302063656c6f307831363865303037643966356137393437393465343030333563353231343936336362313662666237a2646970667358221220a08299b1fd4bec943eb0726f546e730d9a437f91633948bcba621ec13c52401364736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063a22cb4651161007c578063a22cb465146103f3578063b16060a61461040f578063b88d4fde14610419578063c87b56dd14610435578063da41429114610465578063e985e9c5146104985761014d565b806370a082311461031b5780637a5cba991461034b5780638c7e7f65146103695780638d03b102146103995780638e26c087146103b757806395d89b41146103d55761014d565b806313e4cfaf1161011557806313e4cfaf1461021c5780631b860d751461024c57806323b872dd1461027c57806342842e0e146102985780635658ccb6146102b45780636352211e146102eb5761014d565b806301ffc9a71461015257806306fdde0314610182578063081812fc146101a0578063095ea7b3146101d057806311fd3bba146101ec575b600080fd5b61016c6004803603810190610167919061266a565b6104c8565b6040516101799190612d1f565b60405180910390f35b61018a6105aa565b6040516101979190612d3a565b60405180910390f35b6101ba60048036038101906101b5919061295d565b61063c565b6040516101c79190612cb8565b60405180910390f35b6101ea60048036038101906101e5919061262a565b6106c1565b005b610206600480360381019061020191906126c4565b6107d9565b6040516102139190612d3a565b60405180910390f35b610236600480360381019061023191906127e3565b6108c1565b6040516102439190612f8b565b60405180910390f35b610266600480360381019061026191906126c4565b610a13565b6040516102739190612d3a565b60405180910390f35b61029660048036038101906102919190612514565b610afb565b005b6102b260048036038101906102ad9190612514565b610b5b565b005b6102ce60048036038101906102c9919061295d565b610b7b565b6040516102e2989796959493929190612d5c565b60405180910390f35b6103056004803603810190610300919061295d565b610f7b565b6040516103129190612cb8565b60405180910390f35b610335600480360381019061033091906124a7565b61102d565b6040516103429190612f8b565b60405180910390f35b6103536110e5565b6040516103609190612f8b565b60405180910390f35b610383600480360381019061037e919061273c565b6110eb565b6040516103909190612f8b565b60405180910390f35b6103a16111ad565b6040516103ae9190612d3a565b60405180910390f35b6103bf611357565b6040516103cc9190612f8b565b60405180910390f35b6103dd61135d565b6040516103ea9190612d3a565b60405180910390f35b61040d600480360381019061040891906125ea565b6113ef565b005b610417611405565b005b610433600480360381019061042e9190612567565b611535565b005b61044f600480360381019061044a919061295d565b611597565b60405161045c9190612d3a565b60405180910390f35b61047f600480360381019061047a919061295d565b61163e565b60405161048f9493929190612fa6565b60405180910390f35b6104b260048036038101906104ad91906124d4565b611806565b6040516104bf9190612d1f565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061059357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105a357506105a28261189a565b5b9050919050565b6060600080546105b99061325b565b80601f01602080910402602001604051908101604052809291908181526020018280546105e59061325b565b80156106325780601f1061060757610100808354040283529160200191610632565b820191906000526020600020905b81548152906001019060200180831161061557829003601f168201915b5050505050905090565b600061064782611904565b610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90612f0b565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106cc82610f7b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490612f4b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661075c611970565b73ffffffffffffffffffffffffffffffffffffffff16148061078b575061078a81610785611970565b611806565b5b6107ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c190612eab565b60405180910390fd5b6107d48383611978565b505050565b606060005b600754811015610881576009600082815260200190815260200160002060020160405161080b9190612c7d565b604051809103902084805190602001201480156108585750600960008281526020019081526020016000206003016040516108469190612c7d565b60405180910390208380519060200120145b1561086e5761086681611a31565b9150506108bb565b8080610879906132be565b9150506107de565b506040518060400160405280600581526020017f66616c736500000000000000000000000000000000000000000000000000000081525090505b92915050565b60006040518061010001604052808a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815250600860006006548152602001908152602001600020600082015181600001908051906020019061092e92919061227b565b50602082015181600101908051906020019061094b92919061227b565b5060408201518160020155606082015181600301908051906020019061097292919061227b565b50608082015181600401908051906020019061098f92919061227b565b5060a08201518160050190805190602001906109ac92919061227b565b5060c08201518160060190805190602001906109c992919061227b565b5060e08201518160070190805190602001906109e692919061227b565b50905050600660008154809291906109fd906132be565b9190505550600654905098975050505050505050565b606060005b600654811015610abb5760086000828152602001908152602001600020600001604051610a459190612c7d565b60405180910390208480519060200120148015610a92575060086000828152602001908152602001600020600101604051610a809190612c7d565b60405180910390208380519060200120145b15610aa857610aa081611a31565b915050610af5565b8080610ab3906132be565b915050610a18565b506040518060400160405280600581526020017f66616c736500000000000000000000000000000000000000000000000000000081525090505b92915050565b610b0c610b06611970565b82611b92565b610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4290612f6b565b60405180910390fd5b610b56838383611c70565b505050565b610b7683838360405180602001604052806000815250611535565b505050565b6008602052806000526040600020600091509050806000018054610b9e9061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610bca9061325b565b8015610c175780601f10610bec57610100808354040283529160200191610c17565b820191906000526020600020905b815481529060010190602001808311610bfa57829003601f168201915b505050505090806001018054610c2c9061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c589061325b565b8015610ca55780601f10610c7a57610100808354040283529160200191610ca5565b820191906000526020600020905b815481529060010190602001808311610c8857829003601f168201915b505050505090806002015490806003018054610cc09061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610cec9061325b565b8015610d395780601f10610d0e57610100808354040283529160200191610d39565b820191906000526020600020905b815481529060010190602001808311610d1c57829003601f168201915b505050505090806004018054610d4e9061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7a9061325b565b8015610dc75780601f10610d9c57610100808354040283529160200191610dc7565b820191906000526020600020905b815481529060010190602001808311610daa57829003601f168201915b505050505090806005018054610ddc9061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e089061325b565b8015610e555780601f10610e2a57610100808354040283529160200191610e55565b820191906000526020600020905b815481529060010190602001808311610e3857829003601f168201915b505050505090806006018054610e6a9061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e969061325b565b8015610ee35780601f10610eb857610100808354040283529160200191610ee3565b820191906000526020600020905b815481529060010190602001808311610ec657829003601f168201915b505050505090806007018054610ef89061325b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f249061325b565b8015610f715780601f10610f4657610100808354040283529160200191610f71565b820191906000526020600020905b815481529060010190602001808311610f5457829003601f168201915b5050505050905088565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101b90612eeb565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561109e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109590612ecb565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60075481565b6000604051806080016040528060075481526020018581526020018481526020018381525060096000600754815260200190815260200160002060008201518160000155602082015181600101908051906020019061114b92919061227b565b50604082015181600201908051906020019061116892919061227b565b50606082015181600301908051906020019061118592919061227b565b509050506007600081548092919061119c906132be565b919050555060075490509392505050565b60606112fa6040518060600160405280602a8152602001613878602a91396040518060400160405280600281526020017f333500000000000000000000000000000000000000000000000000000000000081525061012c6040518060400160405280600581526020017f4468616b61000000000000000000000000000000000000000000000000000000815250604051806080016040528060458152602001613833604591396040518060400160405280600c81526020017f542d73686972742c2062616700000000000000000000000000000000000000008152506040518060400160405280601081526020017f323032322d31302d31335430343a3036000000000000000000000000000000008152506040518060400160405280600981526020017f696d6167652075726c00000000000000000000000000000000000000000000008152506108c1565b506113526040518060600160405280602a8152602001613878602a91396040518060400160405280600281526020017f3335000000000000000000000000000000000000000000000000000000000000815250610a13565b905090565b60065481565b60606001805461136c9061325b565b80601f01602080910402602001604051908101604052809291908181526020018280546113989061325b565b80156113e55780601f106113ba576101008083540402835291602001916113e5565b820191906000526020600020905b8154815290600101906020018083116113c857829003601f168201915b5050505050905090565b6114016113fa611970565b8383611ed7565b5050565b6000600681905550600060078190555060005b6006548110156114c35760086000828152602001908152602001600020600080820160006114469190612301565b6001820160006114569190612301565b600282016000905560038201600061146e9190612301565b60048201600061147e9190612301565b60058201600061148e9190612301565b60068201600061149e9190612301565b6007820160006114ae9190612301565b505080806114bb906132be565b915050611418565b5060005b60075481101561153257600960008281526020019081526020016000206000808201600090556001820160006114fd9190612301565b60028201600061150d9190612301565b60038201600061151d9190612301565b5050808061152a906132be565b9150506114c7565b50565b611546611540611970565b83611b92565b611585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157c90612f6b565b60405180910390fd5b61159184848484612044565b50505050565b60606115a282611904565b6115e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d890612f2b565b60405180910390fd5b60006115eb6120a0565b9050600081511161160b5760405180602001604052806000815250611636565b8061161584611a31565b604051602001611626929190612c94565b6040516020818303038152906040525b915050919050565b60096020528060005260406000206000915090508060000154908060010180546116679061325b565b80601f01602080910402602001604051908101604052809291908181526020018280546116939061325b565b80156116e05780601f106116b5576101008083540402835291602001916116e0565b820191906000526020600020905b8154815290600101906020018083116116c357829003601f168201915b5050505050908060020180546116f59061325b565b80601f01602080910402602001604051908101604052809291908181526020018280546117219061325b565b801561176e5780601f106117435761010080835404028352916020019161176e565b820191906000526020600020905b81548152906001019060200180831161175157829003601f168201915b5050505050908060030180546117839061325b565b80601f01602080910402602001604051908101604052809291908181526020018280546117af9061325b565b80156117fc5780601f106117d1576101008083540402835291602001916117fc565b820191906000526020600020905b8154815290600101906020018083116117df57829003601f168201915b5050505050905084565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166119eb83610f7b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60606000821415611a79576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611b8d565b600082905060005b60008214611aab578080611a94906132be565b915050600a82611aa49190613140565b9150611a81565b60008167ffffffffffffffff811115611ac757611ac66133f4565b5b6040519080825280601f01601f191660200182016040528015611af95781602001600182028036833780820191505090505b5090505b60008514611b8657600182611b129190613171565b9150600a85611b219190613307565b6030611b2d91906130ea565b60f81b818381518110611b4357611b426133c5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611b7f9190613140565b9450611afd565b8093505050505b919050565b6000611b9d82611904565b611bdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd390612e8b565b60405180910390fd5b6000611be783610f7b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611c295750611c288185611806565b5b80611c6757508373ffffffffffffffffffffffffffffffffffffffff16611c4f8461063c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611c9082610f7b565b73ffffffffffffffffffffffffffffffffffffffff1614611ce6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdd90612e2b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4d90612e4b565b60405180910390fd5b611d618383836120b7565b611d6c600082611978565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611dbc9190613171565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e1391906130ea565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ed28383836120bc565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3d90612e6b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516120379190612d1f565b60405180910390a3505050565b61204f848484611c70565b61205b848484846120c1565b61209a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209190612e0b565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b505050565b505050565b60006120e28473ffffffffffffffffffffffffffffffffffffffff16612258565b1561224b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261210b611970565b8786866040518563ffffffff1660e01b815260040161212d9493929190612cd3565b602060405180830381600087803b15801561214757600080fd5b505af192505050801561217857506040513d601f19601f820116820180604052508101906121759190612697565b60015b6121fb573d80600081146121a8576040519150601f19603f3d011682016040523d82523d6000602084013e6121ad565b606091505b506000815114156121f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ea90612e0b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612250565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546122879061325b565b90600052602060002090601f0160209004810192826122a957600085556122f0565b82601f106122c257805160ff19168380011785556122f0565b828001600101855582156122f0579182015b828111156122ef5782518255916020019190600101906122d4565b5b5090506122fd9190612341565b5090565b50805461230d9061325b565b6000825580601f1061231f575061233e565b601f01602090049060005260206000209081019061233d9190612341565b5b50565b5b8082111561235a576000816000905550600101612342565b5090565b600061237161236c84613025565b613000565b90508281526020810184848401111561238d5761238c613428565b5b612398848285613219565b509392505050565b60006123b36123ae84613056565b613000565b9050828152602081018484840111156123cf576123ce613428565b5b6123da848285613219565b509392505050565b6000813590506123f1816137d6565b92915050565b600081359050612406816137ed565b92915050565b60008135905061241b81613804565b92915050565b60008151905061243081613804565b92915050565b600082601f83011261244b5761244a613423565b5b813561245b84826020860161235e565b91505092915050565b600082601f83011261247957612478613423565b5b81356124898482602086016123a0565b91505092915050565b6000813590506124a18161381b565b92915050565b6000602082840312156124bd576124bc613432565b5b60006124cb848285016123e2565b91505092915050565b600080604083850312156124eb576124ea613432565b5b60006124f9858286016123e2565b925050602061250a858286016123e2565b9150509250929050565b60008060006060848603121561252d5761252c613432565b5b600061253b868287016123e2565b935050602061254c868287016123e2565b925050604061255d86828701612492565b9150509250925092565b6000806000806080858703121561258157612580613432565b5b600061258f878288016123e2565b94505060206125a0878288016123e2565b93505060406125b187828801612492565b925050606085013567ffffffffffffffff8111156125d2576125d161342d565b5b6125de87828801612436565b91505092959194509250565b6000806040838503121561260157612600613432565b5b600061260f858286016123e2565b9250506020612620858286016123f7565b9150509250929050565b6000806040838503121561264157612640613432565b5b600061264f858286016123e2565b925050602061266085828601612492565b9150509250929050565b6000602082840312156126805761267f613432565b5b600061268e8482850161240c565b91505092915050565b6000602082840312156126ad576126ac613432565b5b60006126bb84828501612421565b91505092915050565b600080604083850312156126db576126da613432565b5b600083013567ffffffffffffffff8111156126f9576126f861342d565b5b61270585828601612464565b925050602083013567ffffffffffffffff8111156127265761272561342d565b5b61273285828601612464565b9150509250929050565b60008060006060848603121561275557612754613432565b5b600084013567ffffffffffffffff8111156127735761277261342d565b5b61277f86828701612464565b935050602084013567ffffffffffffffff8111156127a05761279f61342d565b5b6127ac86828701612464565b925050604084013567ffffffffffffffff8111156127cd576127cc61342d565b5b6127d986828701612464565b9150509250925092565b600080600080600080600080610100898b03121561280457612803613432565b5b600089013567ffffffffffffffff8111156128225761282161342d565b5b61282e8b828c01612464565b985050602089013567ffffffffffffffff81111561284f5761284e61342d565b5b61285b8b828c01612464565b975050604061286c8b828c01612492565b965050606089013567ffffffffffffffff81111561288d5761288c61342d565b5b6128998b828c01612464565b955050608089013567ffffffffffffffff8111156128ba576128b961342d565b5b6128c68b828c01612464565b94505060a089013567ffffffffffffffff8111156128e7576128e661342d565b5b6128f38b828c01612464565b93505060c089013567ffffffffffffffff8111156129145761291361342d565b5b6129208b828c01612464565b92505060e089013567ffffffffffffffff8111156129415761294061342d565b5b61294d8b828c01612464565b9150509295985092959890939650565b60006020828403121561297357612972613432565b5b600061298184828501612492565b91505092915050565b612993816131a5565b82525050565b6129a2816131b7565b82525050565b60006129b38261309c565b6129bd81856130b2565b93506129cd818560208601613228565b6129d681613437565b840191505092915050565b600081546129ee8161325b565b6129f881866130c3565b94506001821660008114612a135760018114612a2457612a57565b60ff19831686528186019350612a57565b612a2d85613087565b60005b83811015612a4f57815481890152600182019150602081019050612a30565b838801955050505b50505092915050565b6000612a6b826130a7565b612a7581856130ce565b9350612a85818560208601613228565b612a8e81613437565b840191505092915050565b6000612aa4826130a7565b612aae81856130df565b9350612abe818560208601613228565b80840191505092915050565b6000612ad76032836130ce565b9150612ae282613448565b604082019050919050565b6000612afa6025836130ce565b9150612b0582613497565b604082019050919050565b6000612b1d6024836130ce565b9150612b28826134e6565b604082019050919050565b6000612b406019836130ce565b9150612b4b82613535565b602082019050919050565b6000612b63602c836130ce565b9150612b6e8261355e565b604082019050919050565b6000612b866038836130ce565b9150612b91826135ad565b604082019050919050565b6000612ba9602a836130ce565b9150612bb4826135fc565b604082019050919050565b6000612bcc6029836130ce565b9150612bd78261364b565b604082019050919050565b6000612bef602c836130ce565b9150612bfa8261369a565b604082019050919050565b6000612c12602f836130ce565b9150612c1d826136e9565b604082019050919050565b6000612c356021836130ce565b9150612c4082613738565b604082019050919050565b6000612c586031836130ce565b9150612c6382613787565b604082019050919050565b612c778161320f565b82525050565b6000612c8982846129e1565b915081905092915050565b6000612ca08285612a99565b9150612cac8284612a99565b91508190509392505050565b6000602082019050612ccd600083018461298a565b92915050565b6000608082019050612ce8600083018761298a565b612cf5602083018661298a565b612d026040830185612c6e565b8181036060830152612d1481846129a8565b905095945050505050565b6000602082019050612d346000830184612999565b92915050565b60006020820190508181036000830152612d548184612a60565b905092915050565b6000610100820190508181036000830152612d77818b612a60565b90508181036020830152612d8b818a612a60565b9050612d9a6040830189612c6e565b8181036060830152612dac8188612a60565b90508181036080830152612dc08187612a60565b905081810360a0830152612dd48186612a60565b905081810360c0830152612de88185612a60565b905081810360e0830152612dfc8184612a60565b90509998505050505050505050565b60006020820190508181036000830152612e2481612aca565b9050919050565b60006020820190508181036000830152612e4481612aed565b9050919050565b60006020820190508181036000830152612e6481612b10565b9050919050565b60006020820190508181036000830152612e8481612b33565b9050919050565b60006020820190508181036000830152612ea481612b56565b9050919050565b60006020820190508181036000830152612ec481612b79565b9050919050565b60006020820190508181036000830152612ee481612b9c565b9050919050565b60006020820190508181036000830152612f0481612bbf565b9050919050565b60006020820190508181036000830152612f2481612be2565b9050919050565b60006020820190508181036000830152612f4481612c05565b9050919050565b60006020820190508181036000830152612f6481612c28565b9050919050565b60006020820190508181036000830152612f8481612c4b565b9050919050565b6000602082019050612fa06000830184612c6e565b92915050565b6000608082019050612fbb6000830187612c6e565b8181036020830152612fcd8186612a60565b90508181036040830152612fe18185612a60565b90508181036060830152612ff58184612a60565b905095945050505050565b600061300a61301b565b9050613016828261328d565b919050565b6000604051905090565b600067ffffffffffffffff8211156130405761303f6133f4565b5b61304982613437565b9050602081019050919050565b600067ffffffffffffffff821115613071576130706133f4565b5b61307a82613437565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006130f58261320f565b91506131008361320f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561313557613134613338565b5b828201905092915050565b600061314b8261320f565b91506131568361320f565b92508261316657613165613367565b5b828204905092915050565b600061317c8261320f565b91506131878361320f565b92508282101561319a57613199613338565b5b828203905092915050565b60006131b0826131ef565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561324657808201518184015260208101905061322b565b83811115613255576000848401525b50505050565b6000600282049050600182168061327357607f821691505b6020821081141561328757613286613396565b5b50919050565b61329682613437565b810181811067ffffffffffffffff821117156132b5576132b46133f4565b5b80604052505050565b60006132c98261320f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132fc576132fb613338565b5b600182019050919050565b60006133128261320f565b915061331d8361320f565b92508261332d5761332c613367565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6137df816131a5565b81146137ea57600080fd5b50565b6137f6816131b7565b811461380157600080fd5b50565b61380d816131c3565b811461381857600080fd5b50565b6138248161320f565b811461382f57600080fd5b5056fe4120542d7368697274207769746820746865207769647468206f662035202220616e6420686569676874206f6620372220616e64206120626167206f662034302063656c6f307831363865303037643966356137393437393465343030333563353231343936336362313662666237a2646970667358221220a08299b1fd4bec943eb0726f546e730d9a437f91633948bcba621ec13c52401364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1616,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_certificate_ids",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1618,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_person_ids",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1623,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_certificate_uris",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(certificate_struct)1605_storage)"
      },
      {
        "astId": 1628,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_person_uris",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(person_struct)1614_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(certificate_struct)1605_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CeloERC721.certificate_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(certificate_struct)1605_storage"
      },
      "t_mapping(t_uint256,t_struct(person_struct)1614_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CeloERC721.person_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(person_struct)1614_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(certificate_struct)1605_storage": {
        "encoding": "inplace",
        "label": "struct CeloERC721.certificate_struct",
        "members": [
          {
            "astId": 1590,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1592,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "number",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1594,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1596,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "location",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1598,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1600,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "collection",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1602,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "date",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1604,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "image",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(person_struct)1614_storage": {
        "encoding": "inplace",
        "label": "struct CeloERC721.person_struct",
        "members": [
          {
            "astId": 1607,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "userid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1609,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "username",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1611,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "email",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1613,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "password",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}