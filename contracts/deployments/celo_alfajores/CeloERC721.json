{
  "address": "0x1788830F4EfA23F70aEa14eBEc0E2934ca39210c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_certificate_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_certificate_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "collection",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_claimer",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "collection",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "name": "create_certificate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testing",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_claimer",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "number",
          "type": "string"
        }
      ],
      "name": "validate_certificate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8dfe2eba1ea9f523adba7880ef66f140edb515bb382919c6a3919bc37479e65",
  "receipt": {
    "to": null,
    "from": "0x168e007d9f5a794794E40035C5214963cb16BFB7",
    "contractAddress": "0x1788830F4EfA23F70aEa14eBEc0E2934ca39210c",
    "transactionIndex": 0,
    "gasUsed": "2919854",
    "logsBloom": "0x
    "blockHash": "0x035c16efd850f346c1aefea86010199bad391cc0ff532b14abfe4be3492d4a03",
    "transactionHash": "0xc8dfe2eba1ea9f523adba7880ef66f140edb515bb382919c6a3919bc37479e65",
    "logs": [],
    "blockNumber": 14088797,
    "cumulativeGasUsed": "2919854",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CELO",
    "CELO"
  ],
  "numDeployments": 3,
  "solcInputHash": "8fc9bb2500c8078f080b2b8583f1a5f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_certificate_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_certificate_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collection\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_claimer\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collection\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"name\":\"create_certificate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testing\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_claimer\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"}],\"name\":\"validate_certificate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CeloERC721.sol\":\"CeloERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CeloERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract CeloERC721 is ERC721 {\\r\\n\\r\\n    //Certificate Struct\\r\\n    struct certificate_struct {\\r\\n        string wallet;\\r\\n        string number;\\r\\n        uint256 price;\\r\\n        string location;\\r\\n        string description;\\r\\n        string collection;\\r\\n        string date;\\r\\n        string image;\\r\\n    }\\r\\n\\r\\n    \\r\\n    uint256 public _certificate_ids;\\r\\n    mapping(uint256 => certificate_struct) public _certificate_uris; //_certificate_ids => (Certificate) certificate_struct\\r\\n\\r\\n    constructor(string memory name, string memory symbol)\\r\\n        ERC721(name, symbol)\\r\\n    {}\\r\\n\\r\\n    //Certificate\\r\\n    function create_certificate(string memory _claimer,  string memory number, uint256 price,string memory location,string memory description,string memory collection,string memory date, string memory image)\\r\\n        public\\r\\n        returns (uint256)\\r\\n    {\\r\\n        //Create Certificates into _certificate_uris\\r\\n        _certificate_uris[_certificate_ids] = certificate_struct(_claimer, number, price, location, description, collection, date, image );\\r\\n        _certificate_ids++;\\r\\n\\r\\n        return _certificate_ids;\\r\\n    }\\r\\n\\r\\n    function validate_certificate(string memory _claimer,  string memory number)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        for (uint256 i = 0; i < _certificate_ids; i++){\\r\\n           if (keccak256(bytes(_claimer)) == keccak256(bytes(_certificate_uris[i].wallet)) && (keccak256(bytes(number))) == (keccak256(bytes(_certificate_uris[i].number)))){\\r\\n                return Strings.toString(i);\\r\\n           }\\t\\t\\t\\t\\r\\n        }\\r\\n        return \\\"false\\\";\\r\\n    }\\r\\n\\r\\n   \\r\\n    function reset_all() public {\\r\\n      _certificate_ids = 0;\\r\\n      for (uint256 i = 0; i < _certificate_ids; i++)    delete _certificate_uris[i];\\r\\n    }\\r\\n\\r\\n  function testing() public returns (string memory){\\r\\n    create_certificate(\\\"0x168e007d9f5a794794e40035c5214963cb16bfb7\\\",\\\"35\\\", 300,\\\"Dhaka\\\",\\\"A T-shirt with the width of 5 \\\\\\\" and height of 7\\\\\\\" and a bag of 40 celo\\\",\\\"T-shirt, bag\\\",\\\"2022-10-13T04:06\\\",\\\"image url\\\");\\r\\n    return validate_certificate(\\\"0x168e007d9f5a794794e40035c5214963cb16bfb7\\\",\\\"35\\\");\\r\\n  }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6f8bf33f5ff500c84daef012895ccb379fa1f550f723959dc6ef344d793409bf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620036c6380380620036c68339818101604052810190620000379190620001a3565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61330a80620003bc6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063a22cb46511610071578063a22cb46514610349578063b16060a614610365578063b88d4fde1461036f578063c87b56dd1461038b578063e985e9c5146103bb57610121565b80636352211e1461028f57806370a08231146102bf5780638d03b102146102ef5780638e26c0871461030d57806395d89b411461032b57610121565b806313e4cfaf116100f457806313e4cfaf146101c05780631b860d75146101f057806323b872dd1461022057806342842e0e1461023c5780635658ccb61461025857610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b919061219e565b6103eb565b60405161014d91906127ac565b60405180910390f35b61015e6104cd565b60405161016b91906127c7565b60405180910390f35b61018e600480360381019061018991906123ea565b61055f565b60405161019b9190612745565b60405180910390f35b6101be60048036038101906101b9919061215e565b6105e4565b005b6101da60048036038101906101d59190612270565b6106fc565b6040516101e79190612a18565b60405180910390f35b61020a600480360381019061020591906121f8565b61084e565b60405161021791906127c7565b60405180910390f35b61023a60048036038101906102359190612048565b610936565b005b61025660048036038101906102519190612048565b610996565b005b610272600480360381019061026d91906123ea565b6109b6565b6040516102869897969594939291906127e9565b60405180910390f35b6102a960048036038101906102a491906123ea565b610db6565b6040516102b69190612745565b60405180910390f35b6102d960048036038101906102d49190611fdb565b610e68565b6040516102e69190612a18565b60405180910390f35b6102f7610f20565b60405161030491906127c7565b60405180910390f35b6103156110ca565b6040516103229190612a18565b60405180910390f35b6103336110d0565b60405161034091906127c7565b60405180910390f35b610363600480360381019061035e919061211e565b611162565b005b61036d611178565b005b6103896004803603810190610384919061209b565b611231565b005b6103a560048036038101906103a091906123ea565b611293565b6040516103b291906127c7565b60405180910390f35b6103d560048036038101906103d09190612008565b61133a565b6040516103e291906127ac565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104b657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104c657506104c5826113ce565b5b9050919050565b6060600080546104dc90612c8e565b80601f016020809104026020016040519081016040528092919081815260200182805461050890612c8e565b80156105555780601f1061052a57610100808354040283529160200191610555565b820191906000526020600020905b81548152906001019060200180831161053857829003601f168201915b5050505050905090565b600061056a82611438565b6105a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a090612998565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105ef82610db6565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610660576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610657906129d8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661067f6114a4565b73ffffffffffffffffffffffffffffffffffffffff1614806106ae57506106ad816106a86114a4565b61133a565b5b6106ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e490612938565b60405180910390fd5b6106f783836114ac565b505050565b60006040518061010001604052808a8152602001898152602001888152602001878152602001868152602001858152602001848152602001838152506007600060065481526020019081526020016000206000820151816000019080519060200190610769929190611daf565b506020820151816001019080519060200190610786929190611daf565b506040820151816002015560608201518160030190805190602001906107ad929190611daf565b5060808201518160040190805190602001906107ca929190611daf565b5060a08201518160050190805190602001906107e7929190611daf565b5060c0820151816006019080519060200190610804929190611daf565b5060e0820151816007019080519060200190610821929190611daf565b509050506006600081548092919061083890612cf1565b9190505550600654905098975050505050505050565b606060005b6006548110156108f65760076000828152602001908152602001600020600001604051610880919061270a565b604051809103902084805190602001201480156108cd5750600760008281526020019081526020016000206001016040516108bb919061270a565b60405180910390208380519060200120145b156108e3576108db81611565565b915050610930565b80806108ee90612cf1565b915050610853565b506040518060400160405280600581526020017f66616c736500000000000000000000000000000000000000000000000000000081525090505b92915050565b6109476109416114a4565b826116c6565b610986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097d906129f8565b60405180910390fd5b6109918383836117a4565b505050565b6109b183838360405180602001604052806000815250611231565b505050565b60076020528060005260406000206000915090508060000180546109d990612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0590612c8e565b8015610a525780601f10610a2757610100808354040283529160200191610a52565b820191906000526020600020905b815481529060010190602001808311610a3557829003601f168201915b505050505090806001018054610a6790612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9390612c8e565b8015610ae05780601f10610ab557610100808354040283529160200191610ae0565b820191906000526020600020905b815481529060010190602001808311610ac357829003601f168201915b505050505090806002015490806003018054610afb90612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2790612c8e565b8015610b745780601f10610b4957610100808354040283529160200191610b74565b820191906000526020600020905b815481529060010190602001808311610b5757829003601f168201915b505050505090806004018054610b8990612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb590612c8e565b8015610c025780601f10610bd757610100808354040283529160200191610c02565b820191906000526020600020905b815481529060010190602001808311610be557829003601f168201915b505050505090806005018054610c1790612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4390612c8e565b8015610c905780601f10610c6557610100808354040283529160200191610c90565b820191906000526020600020905b815481529060010190602001808311610c7357829003601f168201915b505050505090806006018054610ca590612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd190612c8e565b8015610d1e5780601f10610cf357610100808354040283529160200191610d1e565b820191906000526020600020905b815481529060010190602001808311610d0157829003601f168201915b505050505090806007018054610d3390612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5f90612c8e565b8015610dac5780601f10610d8157610100808354040283529160200191610dac565b820191906000526020600020905b815481529060010190602001808311610d8f57829003601f168201915b5050505050905088565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5690612978565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed090612958565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606061106d6040518060600160405280602a81526020016132ab602a91396040518060400160405280600281526020017f333500000000000000000000000000000000000000000000000000000000000081525061012c6040518060400160405280600581526020017f4468616b61000000000000000000000000000000000000000000000000000000815250604051806080016040528060458152602001613266604591396040518060400160405280600c81526020017f542d73686972742c2062616700000000000000000000000000000000000000008152506040518060400160405280601081526020017f323032322d31302d31335430343a3036000000000000000000000000000000008152506040518060400160405280600981526020017f696d6167652075726c00000000000000000000000000000000000000000000008152506106fc565b506110c56040518060600160405280602a81526020016132ab602a91396040518060400160405280600281526020017f333500000000000000000000000000000000000000000000000000000000000081525061084e565b905090565b60065481565b6060600180546110df90612c8e565b80601f016020809104026020016040519081016040528092919081815260200182805461110b90612c8e565b80156111585780601f1061112d57610100808354040283529160200191611158565b820191906000526020600020905b81548152906001019060200180831161113b57829003601f168201915b5050505050905090565b61117461116d6114a4565b8383611a0b565b5050565b600060068190555060005b60065481101561122e5760076000828152602001908152602001600020600080820160006111b19190611e35565b6001820160006111c19190611e35565b60028201600090556003820160006111d99190611e35565b6004820160006111e99190611e35565b6005820160006111f99190611e35565b6006820160006112099190611e35565b6007820160006112199190611e35565b5050808061122690612cf1565b915050611183565b50565b61124261123c6114a4565b836116c6565b611281576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611278906129f8565b60405180910390fd5b61128d84848484611b78565b50505050565b606061129e82611438565b6112dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d4906129b8565b60405180910390fd5b60006112e7611bd4565b905060008151116113075760405180602001604052806000815250611332565b8061131184611565565b604051602001611322929190612721565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661151f83610db6565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060008214156115ad576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506116c1565b600082905060005b600082146115df5780806115c890612cf1565b915050600a826115d89190612b73565b91506115b5565b60008167ffffffffffffffff8111156115fb576115fa612e27565b5b6040519080825280601f01601f19166020018201604052801561162d5781602001600182028036833780820191505090505b5090505b600085146116ba576001826116469190612ba4565b9150600a856116559190612d3a565b60306116619190612b1d565b60f81b81838151811061167757611676612df8565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856116b39190612b73565b9450611631565b8093505050505b919050565b60006116d182611438565b611710576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170790612918565b60405180910390fd5b600061171b83610db6565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061175d575061175c818561133a565b5b8061179b57508373ffffffffffffffffffffffffffffffffffffffff166117838461055f565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166117c482610db6565b73ffffffffffffffffffffffffffffffffffffffff161461181a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611811906128b8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561188a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611881906128d8565b60405180910390fd5b611895838383611beb565b6118a06000826114ac565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118f09190612ba4565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119479190612b1d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a06838383611bf0565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a71906128f8565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b6b91906127ac565b60405180910390a3505050565b611b838484846117a4565b611b8f84848484611bf5565b611bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc590612898565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b505050565b505050565b6000611c168473ffffffffffffffffffffffffffffffffffffffff16611d8c565b15611d7f578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c3f6114a4565b8786866040518563ffffffff1660e01b8152600401611c619493929190612760565b602060405180830381600087803b158015611c7b57600080fd5b505af1925050508015611cac57506040513d601f19601f82011682018060405250810190611ca991906121cb565b60015b611d2f573d8060008114611cdc576040519150601f19603f3d011682016040523d82523d6000602084013e611ce1565b606091505b50600081511415611d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1e90612898565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611d84565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611dbb90612c8e565b90600052602060002090601f016020900481019282611ddd5760008555611e24565b82601f10611df657805160ff1916838001178555611e24565b82800160010185558215611e24579182015b82811115611e23578251825591602001919060010190611e08565b5b509050611e319190611e75565b5090565b508054611e4190612c8e565b6000825580601f10611e535750611e72565b601f016020900490600052602060002090810190611e719190611e75565b5b50565b5b80821115611e8e576000816000905550600101611e76565b5090565b6000611ea5611ea084612a58565b612a33565b905082815260208101848484011115611ec157611ec0612e5b565b5b611ecc848285612c4c565b509392505050565b6000611ee7611ee284612a89565b612a33565b905082815260208101848484011115611f0357611f02612e5b565b5b611f0e848285612c4c565b509392505050565b600081359050611f2581613209565b92915050565b600081359050611f3a81613220565b92915050565b600081359050611f4f81613237565b92915050565b600081519050611f6481613237565b92915050565b600082601f830112611f7f57611f7e612e56565b5b8135611f8f848260208601611e92565b91505092915050565b600082601f830112611fad57611fac612e56565b5b8135611fbd848260208601611ed4565b91505092915050565b600081359050611fd58161324e565b92915050565b600060208284031215611ff157611ff0612e65565b5b6000611fff84828501611f16565b91505092915050565b6000806040838503121561201f5761201e612e65565b5b600061202d85828601611f16565b925050602061203e85828601611f16565b9150509250929050565b60008060006060848603121561206157612060612e65565b5b600061206f86828701611f16565b935050602061208086828701611f16565b925050604061209186828701611fc6565b9150509250925092565b600080600080608085870312156120b5576120b4612e65565b5b60006120c387828801611f16565b94505060206120d487828801611f16565b93505060406120e587828801611fc6565b925050606085013567ffffffffffffffff81111561210657612105612e60565b5b61211287828801611f6a565b91505092959194509250565b6000806040838503121561213557612134612e65565b5b600061214385828601611f16565b925050602061215485828601611f2b565b9150509250929050565b6000806040838503121561217557612174612e65565b5b600061218385828601611f16565b925050602061219485828601611fc6565b9150509250929050565b6000602082840312156121b4576121b3612e65565b5b60006121c284828501611f40565b91505092915050565b6000602082840312156121e1576121e0612e65565b5b60006121ef84828501611f55565b91505092915050565b6000806040838503121561220f5761220e612e65565b5b600083013567ffffffffffffffff81111561222d5761222c612e60565b5b61223985828601611f98565b925050602083013567ffffffffffffffff81111561225a57612259612e60565b5b61226685828601611f98565b9150509250929050565b600080600080600080600080610100898b03121561229157612290612e65565b5b600089013567ffffffffffffffff8111156122af576122ae612e60565b5b6122bb8b828c01611f98565b985050602089013567ffffffffffffffff8111156122dc576122db612e60565b5b6122e88b828c01611f98565b97505060406122f98b828c01611fc6565b965050606089013567ffffffffffffffff81111561231a57612319612e60565b5b6123268b828c01611f98565b955050608089013567ffffffffffffffff81111561234757612346612e60565b5b6123538b828c01611f98565b94505060a089013567ffffffffffffffff81111561237457612373612e60565b5b6123808b828c01611f98565b93505060c089013567ffffffffffffffff8111156123a1576123a0612e60565b5b6123ad8b828c01611f98565b92505060e089013567ffffffffffffffff8111156123ce576123cd612e60565b5b6123da8b828c01611f98565b9150509295985092959890939650565b600060208284031215612400576123ff612e65565b5b600061240e84828501611fc6565b91505092915050565b61242081612bd8565b82525050565b61242f81612bea565b82525050565b600061244082612acf565b61244a8185612ae5565b935061245a818560208601612c5b565b61246381612e6a565b840191505092915050565b6000815461247b81612c8e565b6124858186612af6565b945060018216600081146124a057600181146124b1576124e4565b60ff198316865281860193506124e4565b6124ba85612aba565b60005b838110156124dc578154818901526001820191506020810190506124bd565b838801955050505b50505092915050565b60006124f882612ada565b6125028185612b01565b9350612512818560208601612c5b565b61251b81612e6a565b840191505092915050565b600061253182612ada565b61253b8185612b12565b935061254b818560208601612c5b565b80840191505092915050565b6000612564603283612b01565b915061256f82612e7b565b604082019050919050565b6000612587602583612b01565b915061259282612eca565b604082019050919050565b60006125aa602483612b01565b91506125b582612f19565b604082019050919050565b60006125cd601983612b01565b91506125d882612f68565b602082019050919050565b60006125f0602c83612b01565b91506125fb82612f91565b604082019050919050565b6000612613603883612b01565b915061261e82612fe0565b604082019050919050565b6000612636602a83612b01565b91506126418261302f565b604082019050919050565b6000612659602983612b01565b91506126648261307e565b604082019050919050565b600061267c602c83612b01565b9150612687826130cd565b604082019050919050565b600061269f602f83612b01565b91506126aa8261311c565b604082019050919050565b60006126c2602183612b01565b91506126cd8261316b565b604082019050919050565b60006126e5603183612b01565b91506126f0826131ba565b604082019050919050565b61270481612c42565b82525050565b6000612716828461246e565b915081905092915050565b600061272d8285612526565b91506127398284612526565b91508190509392505050565b600060208201905061275a6000830184612417565b92915050565b60006080820190506127756000830187612417565b6127826020830186612417565b61278f60408301856126fb565b81810360608301526127a18184612435565b905095945050505050565b60006020820190506127c16000830184612426565b92915050565b600060208201905081810360008301526127e181846124ed565b905092915050565b6000610100820190508181036000830152612804818b6124ed565b90508181036020830152612818818a6124ed565b905061282760408301896126fb565b818103606083015261283981886124ed565b9050818103608083015261284d81876124ed565b905081810360a083015261286181866124ed565b905081810360c083015261287581856124ed565b905081810360e083015261288981846124ed565b90509998505050505050505050565b600060208201905081810360008301526128b181612557565b9050919050565b600060208201905081810360008301526128d18161257a565b9050919050565b600060208201905081810360008301526128f18161259d565b9050919050565b60006020820190508181036000830152612911816125c0565b9050919050565b60006020820190508181036000830152612931816125e3565b9050919050565b6000602082019050818103600083015261295181612606565b9050919050565b6000602082019050818103600083015261297181612629565b9050919050565b600060208201905081810360008301526129918161264c565b9050919050565b600060208201905081810360008301526129b18161266f565b9050919050565b600060208201905081810360008301526129d181612692565b9050919050565b600060208201905081810360008301526129f1816126b5565b9050919050565b60006020820190508181036000830152612a11816126d8565b9050919050565b6000602082019050612a2d60008301846126fb565b92915050565b6000612a3d612a4e565b9050612a498282612cc0565b919050565b6000604051905090565b600067ffffffffffffffff821115612a7357612a72612e27565b5b612a7c82612e6a565b9050602081019050919050565b600067ffffffffffffffff821115612aa457612aa3612e27565b5b612aad82612e6a565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612b2882612c42565b9150612b3383612c42565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b6857612b67612d6b565b5b828201905092915050565b6000612b7e82612c42565b9150612b8983612c42565b925082612b9957612b98612d9a565b5b828204905092915050565b6000612baf82612c42565b9150612bba83612c42565b925082821015612bcd57612bcc612d6b565b5b828203905092915050565b6000612be382612c22565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612c79578082015181840152602081019050612c5e565b83811115612c88576000848401525b50505050565b60006002820490506001821680612ca657607f821691505b60208210811415612cba57612cb9612dc9565b5b50919050565b612cc982612e6a565b810181811067ffffffffffffffff82111715612ce857612ce7612e27565b5b80604052505050565b6000612cfc82612c42565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d2f57612d2e612d6b565b5b600182019050919050565b6000612d4582612c42565b9150612d5083612c42565b925082612d6057612d5f612d9a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b61321281612bd8565b811461321d57600080fd5b50565b61322981612bea565b811461323457600080fd5b50565b61324081612bf6565b811461324b57600080fd5b50565b61325781612c42565b811461326257600080fd5b5056fe4120542d7368697274207769746820746865207769647468206f662035202220616e6420686569676874206f6620372220616e64206120626167206f662034302063656c6f307831363865303037643966356137393437393465343030333563353231343936336362313662666237a2646970667358221220ee69637725cbc5490c76c79440c6d299831ce414d6221a401becd763209a289864736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063a22cb46511610071578063a22cb46514610349578063b16060a614610365578063b88d4fde1461036f578063c87b56dd1461038b578063e985e9c5146103bb57610121565b80636352211e1461028f57806370a08231146102bf5780638d03b102146102ef5780638e26c0871461030d57806395d89b411461032b57610121565b806313e4cfaf116100f457806313e4cfaf146101c05780631b860d75146101f057806323b872dd1461022057806342842e0e1461023c5780635658ccb61461025857610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b919061219e565b6103eb565b60405161014d91906127ac565b60405180910390f35b61015e6104cd565b60405161016b91906127c7565b60405180910390f35b61018e600480360381019061018991906123ea565b61055f565b60405161019b9190612745565b60405180910390f35b6101be60048036038101906101b9919061215e565b6105e4565b005b6101da60048036038101906101d59190612270565b6106fc565b6040516101e79190612a18565b60405180910390f35b61020a600480360381019061020591906121f8565b61084e565b60405161021791906127c7565b60405180910390f35b61023a60048036038101906102359190612048565b610936565b005b61025660048036038101906102519190612048565b610996565b005b610272600480360381019061026d91906123ea565b6109b6565b6040516102869897969594939291906127e9565b60405180910390f35b6102a960048036038101906102a491906123ea565b610db6565b6040516102b69190612745565b60405180910390f35b6102d960048036038101906102d49190611fdb565b610e68565b6040516102e69190612a18565b60405180910390f35b6102f7610f20565b60405161030491906127c7565b60405180910390f35b6103156110ca565b6040516103229190612a18565b60405180910390f35b6103336110d0565b60405161034091906127c7565b60405180910390f35b610363600480360381019061035e919061211e565b611162565b005b61036d611178565b005b6103896004803603810190610384919061209b565b611231565b005b6103a560048036038101906103a091906123ea565b611293565b6040516103b291906127c7565b60405180910390f35b6103d560048036038101906103d09190612008565b61133a565b6040516103e291906127ac565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104b657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104c657506104c5826113ce565b5b9050919050565b6060600080546104dc90612c8e565b80601f016020809104026020016040519081016040528092919081815260200182805461050890612c8e565b80156105555780601f1061052a57610100808354040283529160200191610555565b820191906000526020600020905b81548152906001019060200180831161053857829003601f168201915b5050505050905090565b600061056a82611438565b6105a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a090612998565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105ef82610db6565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610660576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610657906129d8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661067f6114a4565b73ffffffffffffffffffffffffffffffffffffffff1614806106ae57506106ad816106a86114a4565b61133a565b5b6106ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e490612938565b60405180910390fd5b6106f783836114ac565b505050565b60006040518061010001604052808a8152602001898152602001888152602001878152602001868152602001858152602001848152602001838152506007600060065481526020019081526020016000206000820151816000019080519060200190610769929190611daf565b506020820151816001019080519060200190610786929190611daf565b506040820151816002015560608201518160030190805190602001906107ad929190611daf565b5060808201518160040190805190602001906107ca929190611daf565b5060a08201518160050190805190602001906107e7929190611daf565b5060c0820151816006019080519060200190610804929190611daf565b5060e0820151816007019080519060200190610821929190611daf565b509050506006600081548092919061083890612cf1565b9190505550600654905098975050505050505050565b606060005b6006548110156108f65760076000828152602001908152602001600020600001604051610880919061270a565b604051809103902084805190602001201480156108cd5750600760008281526020019081526020016000206001016040516108bb919061270a565b60405180910390208380519060200120145b156108e3576108db81611565565b915050610930565b80806108ee90612cf1565b915050610853565b506040518060400160405280600581526020017f66616c736500000000000000000000000000000000000000000000000000000081525090505b92915050565b6109476109416114a4565b826116c6565b610986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097d906129f8565b60405180910390fd5b6109918383836117a4565b505050565b6109b183838360405180602001604052806000815250611231565b505050565b60076020528060005260406000206000915090508060000180546109d990612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0590612c8e565b8015610a525780601f10610a2757610100808354040283529160200191610a52565b820191906000526020600020905b815481529060010190602001808311610a3557829003601f168201915b505050505090806001018054610a6790612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9390612c8e565b8015610ae05780601f10610ab557610100808354040283529160200191610ae0565b820191906000526020600020905b815481529060010190602001808311610ac357829003601f168201915b505050505090806002015490806003018054610afb90612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2790612c8e565b8015610b745780601f10610b4957610100808354040283529160200191610b74565b820191906000526020600020905b815481529060010190602001808311610b5757829003601f168201915b505050505090806004018054610b8990612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb590612c8e565b8015610c025780601f10610bd757610100808354040283529160200191610c02565b820191906000526020600020905b815481529060010190602001808311610be557829003601f168201915b505050505090806005018054610c1790612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4390612c8e565b8015610c905780601f10610c6557610100808354040283529160200191610c90565b820191906000526020600020905b815481529060010190602001808311610c7357829003601f168201915b505050505090806006018054610ca590612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd190612c8e565b8015610d1e5780601f10610cf357610100808354040283529160200191610d1e565b820191906000526020600020905b815481529060010190602001808311610d0157829003601f168201915b505050505090806007018054610d3390612c8e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5f90612c8e565b8015610dac5780601f10610d8157610100808354040283529160200191610dac565b820191906000526020600020905b815481529060010190602001808311610d8f57829003601f168201915b5050505050905088565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5690612978565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed090612958565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606061106d6040518060600160405280602a81526020016132ab602a91396040518060400160405280600281526020017f333500000000000000000000000000000000000000000000000000000000000081525061012c6040518060400160405280600581526020017f4468616b61000000000000000000000000000000000000000000000000000000815250604051806080016040528060458152602001613266604591396040518060400160405280600c81526020017f542d73686972742c2062616700000000000000000000000000000000000000008152506040518060400160405280601081526020017f323032322d31302d31335430343a3036000000000000000000000000000000008152506040518060400160405280600981526020017f696d6167652075726c00000000000000000000000000000000000000000000008152506106fc565b506110c56040518060600160405280602a81526020016132ab602a91396040518060400160405280600281526020017f333500000000000000000000000000000000000000000000000000000000000081525061084e565b905090565b60065481565b6060600180546110df90612c8e565b80601f016020809104026020016040519081016040528092919081815260200182805461110b90612c8e565b80156111585780601f1061112d57610100808354040283529160200191611158565b820191906000526020600020905b81548152906001019060200180831161113b57829003601f168201915b5050505050905090565b61117461116d6114a4565b8383611a0b565b5050565b600060068190555060005b60065481101561122e5760076000828152602001908152602001600020600080820160006111b19190611e35565b6001820160006111c19190611e35565b60028201600090556003820160006111d99190611e35565b6004820160006111e99190611e35565b6005820160006111f99190611e35565b6006820160006112099190611e35565b6007820160006112199190611e35565b5050808061122690612cf1565b915050611183565b50565b61124261123c6114a4565b836116c6565b611281576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611278906129f8565b60405180910390fd5b61128d84848484611b78565b50505050565b606061129e82611438565b6112dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d4906129b8565b60405180910390fd5b60006112e7611bd4565b905060008151116113075760405180602001604052806000815250611332565b8061131184611565565b604051602001611322929190612721565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661151f83610db6565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060008214156115ad576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506116c1565b600082905060005b600082146115df5780806115c890612cf1565b915050600a826115d89190612b73565b91506115b5565b60008167ffffffffffffffff8111156115fb576115fa612e27565b5b6040519080825280601f01601f19166020018201604052801561162d5781602001600182028036833780820191505090505b5090505b600085146116ba576001826116469190612ba4565b9150600a856116559190612d3a565b60306116619190612b1d565b60f81b81838151811061167757611676612df8565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856116b39190612b73565b9450611631565b8093505050505b919050565b60006116d182611438565b611710576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170790612918565b60405180910390fd5b600061171b83610db6565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061175d575061175c818561133a565b5b8061179b57508373ffffffffffffffffffffffffffffffffffffffff166117838461055f565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166117c482610db6565b73ffffffffffffffffffffffffffffffffffffffff161461181a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611811906128b8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561188a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611881906128d8565b60405180910390fd5b611895838383611beb565b6118a06000826114ac565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118f09190612ba4565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119479190612b1d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a06838383611bf0565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a71906128f8565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b6b91906127ac565b60405180910390a3505050565b611b838484846117a4565b611b8f84848484611bf5565b611bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc590612898565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b505050565b505050565b6000611c168473ffffffffffffffffffffffffffffffffffffffff16611d8c565b15611d7f578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c3f6114a4565b8786866040518563ffffffff1660e01b8152600401611c619493929190612760565b602060405180830381600087803b158015611c7b57600080fd5b505af1925050508015611cac57506040513d601f19601f82011682018060405250810190611ca991906121cb565b60015b611d2f573d8060008114611cdc576040519150601f19603f3d011682016040523d82523d6000602084013e611ce1565b606091505b50600081511415611d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1e90612898565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611d84565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611dbb90612c8e565b90600052602060002090601f016020900481019282611ddd5760008555611e24565b82601f10611df657805160ff1916838001178555611e24565b82800160010185558215611e24579182015b82811115611e23578251825591602001919060010190611e08565b5b509050611e319190611e75565b5090565b508054611e4190612c8e565b6000825580601f10611e535750611e72565b601f016020900490600052602060002090810190611e719190611e75565b5b50565b5b80821115611e8e576000816000905550600101611e76565b5090565b6000611ea5611ea084612a58565b612a33565b905082815260208101848484011115611ec157611ec0612e5b565b5b611ecc848285612c4c565b509392505050565b6000611ee7611ee284612a89565b612a33565b905082815260208101848484011115611f0357611f02612e5b565b5b611f0e848285612c4c565b509392505050565b600081359050611f2581613209565b92915050565b600081359050611f3a81613220565b92915050565b600081359050611f4f81613237565b92915050565b600081519050611f6481613237565b92915050565b600082601f830112611f7f57611f7e612e56565b5b8135611f8f848260208601611e92565b91505092915050565b600082601f830112611fad57611fac612e56565b5b8135611fbd848260208601611ed4565b91505092915050565b600081359050611fd58161324e565b92915050565b600060208284031215611ff157611ff0612e65565b5b6000611fff84828501611f16565b91505092915050565b6000806040838503121561201f5761201e612e65565b5b600061202d85828601611f16565b925050602061203e85828601611f16565b9150509250929050565b60008060006060848603121561206157612060612e65565b5b600061206f86828701611f16565b935050602061208086828701611f16565b925050604061209186828701611fc6565b9150509250925092565b600080600080608085870312156120b5576120b4612e65565b5b60006120c387828801611f16565b94505060206120d487828801611f16565b93505060406120e587828801611fc6565b925050606085013567ffffffffffffffff81111561210657612105612e60565b5b61211287828801611f6a565b91505092959194509250565b6000806040838503121561213557612134612e65565b5b600061214385828601611f16565b925050602061215485828601611f2b565b9150509250929050565b6000806040838503121561217557612174612e65565b5b600061218385828601611f16565b925050602061219485828601611fc6565b9150509250929050565b6000602082840312156121b4576121b3612e65565b5b60006121c284828501611f40565b91505092915050565b6000602082840312156121e1576121e0612e65565b5b60006121ef84828501611f55565b91505092915050565b6000806040838503121561220f5761220e612e65565b5b600083013567ffffffffffffffff81111561222d5761222c612e60565b5b61223985828601611f98565b925050602083013567ffffffffffffffff81111561225a57612259612e60565b5b61226685828601611f98565b9150509250929050565b600080600080600080600080610100898b03121561229157612290612e65565b5b600089013567ffffffffffffffff8111156122af576122ae612e60565b5b6122bb8b828c01611f98565b985050602089013567ffffffffffffffff8111156122dc576122db612e60565b5b6122e88b828c01611f98565b97505060406122f98b828c01611fc6565b965050606089013567ffffffffffffffff81111561231a57612319612e60565b5b6123268b828c01611f98565b955050608089013567ffffffffffffffff81111561234757612346612e60565b5b6123538b828c01611f98565b94505060a089013567ffffffffffffffff81111561237457612373612e60565b5b6123808b828c01611f98565b93505060c089013567ffffffffffffffff8111156123a1576123a0612e60565b5b6123ad8b828c01611f98565b92505060e089013567ffffffffffffffff8111156123ce576123cd612e60565b5b6123da8b828c01611f98565b9150509295985092959890939650565b600060208284031215612400576123ff612e65565b5b600061240e84828501611fc6565b91505092915050565b61242081612bd8565b82525050565b61242f81612bea565b82525050565b600061244082612acf565b61244a8185612ae5565b935061245a818560208601612c5b565b61246381612e6a565b840191505092915050565b6000815461247b81612c8e565b6124858186612af6565b945060018216600081146124a057600181146124b1576124e4565b60ff198316865281860193506124e4565b6124ba85612aba565b60005b838110156124dc578154818901526001820191506020810190506124bd565b838801955050505b50505092915050565b60006124f882612ada565b6125028185612b01565b9350612512818560208601612c5b565b61251b81612e6a565b840191505092915050565b600061253182612ada565b61253b8185612b12565b935061254b818560208601612c5b565b80840191505092915050565b6000612564603283612b01565b915061256f82612e7b565b604082019050919050565b6000612587602583612b01565b915061259282612eca565b604082019050919050565b60006125aa602483612b01565b91506125b582612f19565b604082019050919050565b60006125cd601983612b01565b91506125d882612f68565b602082019050919050565b60006125f0602c83612b01565b91506125fb82612f91565b604082019050919050565b6000612613603883612b01565b915061261e82612fe0565b604082019050919050565b6000612636602a83612b01565b91506126418261302f565b604082019050919050565b6000612659602983612b01565b91506126648261307e565b604082019050919050565b600061267c602c83612b01565b9150612687826130cd565b604082019050919050565b600061269f602f83612b01565b91506126aa8261311c565b604082019050919050565b60006126c2602183612b01565b91506126cd8261316b565b604082019050919050565b60006126e5603183612b01565b91506126f0826131ba565b604082019050919050565b61270481612c42565b82525050565b6000612716828461246e565b915081905092915050565b600061272d8285612526565b91506127398284612526565b91508190509392505050565b600060208201905061275a6000830184612417565b92915050565b60006080820190506127756000830187612417565b6127826020830186612417565b61278f60408301856126fb565b81810360608301526127a18184612435565b905095945050505050565b60006020820190506127c16000830184612426565b92915050565b600060208201905081810360008301526127e181846124ed565b905092915050565b6000610100820190508181036000830152612804818b6124ed565b90508181036020830152612818818a6124ed565b905061282760408301896126fb565b818103606083015261283981886124ed565b9050818103608083015261284d81876124ed565b905081810360a083015261286181866124ed565b905081810360c083015261287581856124ed565b905081810360e083015261288981846124ed565b90509998505050505050505050565b600060208201905081810360008301526128b181612557565b9050919050565b600060208201905081810360008301526128d18161257a565b9050919050565b600060208201905081810360008301526128f18161259d565b9050919050565b60006020820190508181036000830152612911816125c0565b9050919050565b60006020820190508181036000830152612931816125e3565b9050919050565b6000602082019050818103600083015261295181612606565b9050919050565b6000602082019050818103600083015261297181612629565b9050919050565b600060208201905081810360008301526129918161264c565b9050919050565b600060208201905081810360008301526129b18161266f565b9050919050565b600060208201905081810360008301526129d181612692565b9050919050565b600060208201905081810360008301526129f1816126b5565b9050919050565b60006020820190508181036000830152612a11816126d8565b9050919050565b6000602082019050612a2d60008301846126fb565b92915050565b6000612a3d612a4e565b9050612a498282612cc0565b919050565b6000604051905090565b600067ffffffffffffffff821115612a7357612a72612e27565b5b612a7c82612e6a565b9050602081019050919050565b600067ffffffffffffffff821115612aa457612aa3612e27565b5b612aad82612e6a565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612b2882612c42565b9150612b3383612c42565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b6857612b67612d6b565b5b828201905092915050565b6000612b7e82612c42565b9150612b8983612c42565b925082612b9957612b98612d9a565b5b828204905092915050565b6000612baf82612c42565b9150612bba83612c42565b925082821015612bcd57612bcc612d6b565b5b828203905092915050565b6000612be382612c22565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612c79578082015181840152602081019050612c5e565b83811115612c88576000848401525b50505050565b60006002820490506001821680612ca657607f821691505b60208210811415612cba57612cb9612dc9565b5b50919050565b612cc982612e6a565b810181811067ffffffffffffffff82111715612ce857612ce7612e27565b5b80604052505050565b6000612cfc82612c42565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d2f57612d2e612d6b565b5b600182019050919050565b6000612d4582612c42565b9150612d5083612c42565b925082612d6057612d5f612d9a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b61321281612bd8565b811461321d57600080fd5b50565b61322981612bea565b811461323457600080fd5b50565b61324081612bf6565b811461324b57600080fd5b50565b61325781612c42565b811461326257600080fd5b5056fe4120542d7368697274207769746820746865207769647468206f662035202220616e6420686569676874206f6620372220616e64206120626167206f662034302063656c6f307831363865303037643966356137393437393465343030333563353231343936336362313662666237a2646970667358221220ee69637725cbc5490c76c79440c6d299831ce414d6221a401becd763209a289864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1607,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_certificate_ids",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1612,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_certificate_uris",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(certificate_struct)1605_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(certificate_struct)1605_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CeloERC721.certificate_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(certificate_struct)1605_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(certificate_struct)1605_storage": {
        "encoding": "inplace",
        "label": "struct CeloERC721.certificate_struct",
        "members": [
          {
            "astId": 1590,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1592,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "number",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1594,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1596,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "location",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1598,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1600,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "collection",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1602,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "date",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1604,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "image",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}