{
  "address": "0x71A24CE24770a61526a3bCB6e7867c49aF0145c8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_certificate_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "wallet",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "collection",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_claimer",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "collection",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "name": "create_certificate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_claimer",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "validate_certificate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f66a085c65056cdbfab61bb80ab7fdcd706e696fb1704431d9dca1825543f54",
  "receipt": {
    "to": null,
    "from": "0x168e007d9f5a794794E40035C5214963cb16BFB7",
    "contractAddress": "0x71A24CE24770a61526a3bCB6e7867c49aF0145c8",
    "transactionIndex": 0,
    "gasUsed": "2731771",
    "logsBloom": "0x
    "blockHash": "0xcf53a64be66db65f7db50179c0a6204e7f7ceb36be82161cb2be267d7a735c8e",
    "transactionHash": "0x0f66a085c65056cdbfab61bb80ab7fdcd706e696fb1704431d9dca1825543f54",
    "logs": [],
    "blockNumber": 14054569,
    "cumulativeGasUsed": "2731771",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CELO",
    "CELO"
  ],
  "numDeployments": 1,
  "solcInputHash": "9630a544d2583b32f2b8a3ea241c631b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_certificate_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collection\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_claimer\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collection\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"name\":\"create_certificate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_claimer\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"validate_certificate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CeloERC721.sol\":\"CeloERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CeloERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract CeloERC721 is ERC721 {\\r\\n\\r\\n    //Certificate Struct\\r\\n    struct certificate_struct {\\r\\n        string wallet;\\r\\n        uint256 number;\\r\\n        uint256 price;\\r\\n        string location;\\r\\n        string description;\\r\\n        string collection;\\r\\n        string date;\\r\\n        string image;\\r\\n    }\\r\\n\\r\\n    \\r\\n    uint256 private _certificate_ids;\\r\\n    mapping(uint256 => certificate_struct) public _certificate_uris; //_certificate_ids => (Certificate) certificate_struct\\r\\n\\r\\n    constructor(string memory name, string memory symbol)\\r\\n        ERC721(name, symbol)\\r\\n    {}\\r\\n\\r\\n    //Certificate\\r\\n    function create_certificate(string memory _claimer,  uint256 number, uint256 price,string memory location,string memory description,string memory collection,string memory date, string memory image)\\r\\n        public\\r\\n        returns (uint256)\\r\\n    {\\r\\n        //Create Certificates into _certificate_uris\\r\\n        _certificate_uris[_certificate_ids] = certificate_struct(_claimer, number, price, location, description, collection, date, image );\\r\\n        _certificate_ids++;\\r\\n\\r\\n        return _certificate_ids;\\r\\n    }\\r\\n\\r\\n    function validate_certificate(string memory _claimer,  uint256 number)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        for (uint256 i = 0; i < _certificate_ids; i++){\\r\\n           if (keccak256(bytes(_claimer)) == keccak256(bytes(_certificate_uris[i].wallet)) && number == _certificate_uris[i].number){\\r\\n                return Strings.toString(i);\\r\\n           }\\t\\t\\t\\t\\r\\n        }\\r\\n        return \\\"false\\\";\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n   \\r\\n    function reset_all() public {\\r\\n      _certificate_ids = 0;\\r\\n      for (uint256 i = 0; i < _certificate_ids; i++)    delete _certificate_uris[i];\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x8d12e07b3d983795aab9d3ff5662c852c3dcedd02064716423893659b11199c8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003358380380620033588339818101604052810190620000379190620001a3565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b612f9c80620003bc6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80635658ccb6116100a2578063a22cb46511610071578063a22cb465146102f7578063b16060a614610313578063b88d4fde1461031d578063c87b56dd14610339578063e985e9c5146103695761010b565b80635658ccb6146102425780636352211e1461027957806370a08231146102a957806395d89b41146102d95761010b565b80630a786bfc116100de5780630a786bfc146101aa57806323b872dd146101da57806342842e0e146101f65780634cc124a5146102125761010b565b806301ffc9a71461011057806306fdde0314610140578063081812fc1461015e578063095ea7b31461018e575b600080fd5b61012a60048036038101906101259190611ede565b610399565b60405161013791906124b4565b60405180910390f35b61014861047b565b60405161015591906124cf565b60405180910390f35b610178600480360381019061017391906120f2565b61050d565b604051610185919061244d565b60405180910390f35b6101a860048036038101906101a39190611e9e565b610592565b005b6101c460048036038101906101bf9190611f38565b6106aa565b6040516101d191906124cf565b60405180910390f35b6101f460048036038101906101ef9190611d88565b610777565b005b610210600480360381019061020b9190611d88565b6107d7565b005b61022c60048036038101906102279190611f94565b6107f7565b6040516102399190612719565b60405180910390f35b61025c600480360381019061025791906120f2565b610936565b6040516102709897969594939291906124f1565b60405180910390f35b610293600480360381019061028e91906120f2565b610cae565b6040516102a0919061244d565b60405180910390f35b6102c360048036038101906102be9190611d1b565b610d60565b6040516102d09190612719565b60405180910390f35b6102e1610e18565b6040516102ee91906124cf565b60405180910390f35b610311600480360381019061030c9190611e5e565b610eaa565b005b61031b610ec0565b005b61033760048036038101906103329190611ddb565b610f71565b005b610353600480360381019061034e91906120f2565b610fd3565b60405161036091906124cf565b60405180910390f35b610383600480360381019061037e9190611d48565b61107a565b60405161039091906124b4565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061046457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061047457506104738261110e565b5b9050919050565b60606000805461048a9061298f565b80601f01602080910402602001604051908101604052809291908181526020018280546104b69061298f565b80156105035780601f106104d857610100808354040283529160200191610503565b820191906000526020600020905b8154815290600101906020018083116104e657829003601f168201915b5050505050905090565b600061051882611178565b610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90612699565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061059d82610cae565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561060e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610605906126d9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661062d6111e4565b73ffffffffffffffffffffffffffffffffffffffff16148061065c575061065b816106566111e4565b61107a565b5b61069b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069290612639565b60405180910390fd5b6106a583836111ec565b505050565b606060005b60065481101561073757600760008281526020019081526020016000206000016040516106dc9190612412565b6040518091039020848051906020012014801561070e5750600760008281526020019081526020016000206001015483145b156107245761071c816112a5565b915050610771565b808061072f906129f2565b9150506106af565b506040518060400160405280600581526020017f66616c736500000000000000000000000000000000000000000000000000000081525090505b92915050565b6107886107826111e4565b82611406565b6107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be906126f9565b60405180910390fd5b6107d28383836114e4565b505050565b6107f283838360405180602001604052806000815250610f71565b505050565b60006040518061010001604052808a8152602001898152602001888152602001878152602001868152602001858152602001848152602001838152506007600060065481526020019081526020016000206000820151816000019080519060200190610864929190611aef565b5060208201518160010155604082015181600201556060820151816003019080519060200190610895929190611aef565b5060808201518160040190805190602001906108b2929190611aef565b5060a08201518160050190805190602001906108cf929190611aef565b5060c08201518160060190805190602001906108ec929190611aef565b5060e0820151816007019080519060200190610909929190611aef565b5090505060066000815480929190610920906129f2565b9190505550600654905098975050505050505050565b60076020528060005260406000206000915090508060000180546109599061298f565b80601f01602080910402602001604051908101604052809291908181526020018280546109859061298f565b80156109d25780601f106109a7576101008083540402835291602001916109d2565b820191906000526020600020905b8154815290600101906020018083116109b557829003601f168201915b5050505050908060010154908060020154908060030180546109f39061298f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1f9061298f565b8015610a6c5780601f10610a4157610100808354040283529160200191610a6c565b820191906000526020600020905b815481529060010190602001808311610a4f57829003601f168201915b505050505090806004018054610a819061298f565b80601f0160208091040260200160405190810160405280929190818152602001828054610aad9061298f565b8015610afa5780601f10610acf57610100808354040283529160200191610afa565b820191906000526020600020905b815481529060010190602001808311610add57829003601f168201915b505050505090806005018054610b0f9061298f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3b9061298f565b8015610b885780601f10610b5d57610100808354040283529160200191610b88565b820191906000526020600020905b815481529060010190602001808311610b6b57829003601f168201915b505050505090806006018054610b9d9061298f565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc99061298f565b8015610c165780601f10610beb57610100808354040283529160200191610c16565b820191906000526020600020905b815481529060010190602001808311610bf957829003601f168201915b505050505090806007018054610c2b9061298f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c579061298f565b8015610ca45780601f10610c7957610100808354040283529160200191610ca4565b820191906000526020600020905b815481529060010190602001808311610c8757829003601f168201915b5050505050905088565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4e90612679565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc890612659565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610e279061298f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e539061298f565b8015610ea05780601f10610e7557610100808354040283529160200191610ea0565b820191906000526020600020905b815481529060010190602001808311610e8357829003601f168201915b5050505050905090565b610ebc610eb56111e4565b838361174b565b5050565b600060068190555060005b600654811015610f6e576007600082815260200190815260200160002060008082016000610ef99190611b75565b60018201600090556002820160009055600382016000610f199190611b75565b600482016000610f299190611b75565b600582016000610f399190611b75565b600682016000610f499190611b75565b600782016000610f599190611b75565b50508080610f66906129f2565b915050610ecb565b50565b610f82610f7c6111e4565b83611406565b610fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb8906126f9565b60405180910390fd5b610fcd848484846118b8565b50505050565b6060610fde82611178565b61101d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611014906126b9565b60405180910390fd5b6000611027611914565b905060008151116110475760405180602001604052806000815250611072565b80611051846112a5565b604051602001611062929190612429565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661125f83610cae565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060008214156112ed576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611401565b600082905060005b6000821461131f578080611308906129f2565b915050600a826113189190612874565b91506112f5565b60008167ffffffffffffffff81111561133b5761133a612b28565b5b6040519080825280601f01601f19166020018201604052801561136d5781602001600182028036833780820191505090505b5090505b600085146113fa5760018261138691906128a5565b9150600a856113959190612a3b565b60306113a1919061281e565b60f81b8183815181106113b7576113b6612af9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856113f39190612874565b9450611371565b8093505050505b919050565b600061141182611178565b611450576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144790612619565b60405180910390fd5b600061145b83610cae565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061149d575061149c818561107a565b5b806114db57508373ffffffffffffffffffffffffffffffffffffffff166114c38461050d565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661150482610cae565b73ffffffffffffffffffffffffffffffffffffffff161461155a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611551906125b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c1906125d9565b60405180910390fd5b6115d583838361192b565b6115e06000826111ec565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461163091906128a5565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611687919061281e565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611746838383611930565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b1906125f9565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118ab91906124b4565b60405180910390a3505050565b6118c38484846114e4565b6118cf84848484611935565b61190e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190590612599565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b505050565b505050565b60006119568473ffffffffffffffffffffffffffffffffffffffff16611acc565b15611abf578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261197f6111e4565b8786866040518563ffffffff1660e01b81526004016119a19493929190612468565b602060405180830381600087803b1580156119bb57600080fd5b505af19250505080156119ec57506040513d601f19601f820116820180604052508101906119e99190611f0b565b60015b611a6f573d8060008114611a1c576040519150601f19603f3d011682016040523d82523d6000602084013e611a21565b606091505b50600081511415611a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5e90612599565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611ac4565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611afb9061298f565b90600052602060002090601f016020900481019282611b1d5760008555611b64565b82601f10611b3657805160ff1916838001178555611b64565b82800160010185558215611b64579182015b82811115611b63578251825591602001919060010190611b48565b5b509050611b719190611bb5565b5090565b508054611b819061298f565b6000825580601f10611b935750611bb2565b601f016020900490600052602060002090810190611bb19190611bb5565b5b50565b5b80821115611bce576000816000905550600101611bb6565b5090565b6000611be5611be084612759565b612734565b905082815260208101848484011115611c0157611c00612b5c565b5b611c0c84828561294d565b509392505050565b6000611c27611c228461278a565b612734565b905082815260208101848484011115611c4357611c42612b5c565b5b611c4e84828561294d565b509392505050565b600081359050611c6581612f0a565b92915050565b600081359050611c7a81612f21565b92915050565b600081359050611c8f81612f38565b92915050565b600081519050611ca481612f38565b92915050565b600082601f830112611cbf57611cbe612b57565b5b8135611ccf848260208601611bd2565b91505092915050565b600082601f830112611ced57611cec612b57565b5b8135611cfd848260208601611c14565b91505092915050565b600081359050611d1581612f4f565b92915050565b600060208284031215611d3157611d30612b66565b5b6000611d3f84828501611c56565b91505092915050565b60008060408385031215611d5f57611d5e612b66565b5b6000611d6d85828601611c56565b9250506020611d7e85828601611c56565b9150509250929050565b600080600060608486031215611da157611da0612b66565b5b6000611daf86828701611c56565b9350506020611dc086828701611c56565b9250506040611dd186828701611d06565b9150509250925092565b60008060008060808587031215611df557611df4612b66565b5b6000611e0387828801611c56565b9450506020611e1487828801611c56565b9350506040611e2587828801611d06565b925050606085013567ffffffffffffffff811115611e4657611e45612b61565b5b611e5287828801611caa565b91505092959194509250565b60008060408385031215611e7557611e74612b66565b5b6000611e8385828601611c56565b9250506020611e9485828601611c6b565b9150509250929050565b60008060408385031215611eb557611eb4612b66565b5b6000611ec385828601611c56565b9250506020611ed485828601611d06565b9150509250929050565b600060208284031215611ef457611ef3612b66565b5b6000611f0284828501611c80565b91505092915050565b600060208284031215611f2157611f20612b66565b5b6000611f2f84828501611c95565b91505092915050565b60008060408385031215611f4f57611f4e612b66565b5b600083013567ffffffffffffffff811115611f6d57611f6c612b61565b5b611f7985828601611cd8565b9250506020611f8a85828601611d06565b9150509250929050565b600080600080600080600080610100898b031215611fb557611fb4612b66565b5b600089013567ffffffffffffffff811115611fd357611fd2612b61565b5b611fdf8b828c01611cd8565b9850506020611ff08b828c01611d06565b97505060406120018b828c01611d06565b965050606089013567ffffffffffffffff81111561202257612021612b61565b5b61202e8b828c01611cd8565b955050608089013567ffffffffffffffff81111561204f5761204e612b61565b5b61205b8b828c01611cd8565b94505060a089013567ffffffffffffffff81111561207c5761207b612b61565b5b6120888b828c01611cd8565b93505060c089013567ffffffffffffffff8111156120a9576120a8612b61565b5b6120b58b828c01611cd8565b92505060e089013567ffffffffffffffff8111156120d6576120d5612b61565b5b6120e28b828c01611cd8565b9150509295985092959890939650565b60006020828403121561210857612107612b66565b5b600061211684828501611d06565b91505092915050565b612128816128d9565b82525050565b612137816128eb565b82525050565b6000612148826127d0565b61215281856127e6565b935061216281856020860161295c565b61216b81612b6b565b840191505092915050565b600081546121838161298f565b61218d81866127f7565b945060018216600081146121a857600181146121b9576121ec565b60ff198316865281860193506121ec565b6121c2856127bb565b60005b838110156121e4578154818901526001820191506020810190506121c5565b838801955050505b50505092915050565b6000612200826127db565b61220a8185612802565b935061221a81856020860161295c565b61222381612b6b565b840191505092915050565b6000612239826127db565b6122438185612813565b935061225381856020860161295c565b80840191505092915050565b600061226c603283612802565b915061227782612b7c565b604082019050919050565b600061228f602583612802565b915061229a82612bcb565b604082019050919050565b60006122b2602483612802565b91506122bd82612c1a565b604082019050919050565b60006122d5601983612802565b91506122e082612c69565b602082019050919050565b60006122f8602c83612802565b915061230382612c92565b604082019050919050565b600061231b603883612802565b915061232682612ce1565b604082019050919050565b600061233e602a83612802565b915061234982612d30565b604082019050919050565b6000612361602983612802565b915061236c82612d7f565b604082019050919050565b6000612384602c83612802565b915061238f82612dce565b604082019050919050565b60006123a7602f83612802565b91506123b282612e1d565b604082019050919050565b60006123ca602183612802565b91506123d582612e6c565b604082019050919050565b60006123ed603183612802565b91506123f882612ebb565b604082019050919050565b61240c81612943565b82525050565b600061241e8284612176565b915081905092915050565b6000612435828561222e565b9150612441828461222e565b91508190509392505050565b6000602082019050612462600083018461211f565b92915050565b600060808201905061247d600083018761211f565b61248a602083018661211f565b6124976040830185612403565b81810360608301526124a9818461213d565b905095945050505050565b60006020820190506124c9600083018461212e565b92915050565b600060208201905081810360008301526124e981846121f5565b905092915050565b600061010082019050818103600083015261250c818b6121f5565b905061251b602083018a612403565b6125286040830189612403565b818103606083015261253a81886121f5565b9050818103608083015261254e81876121f5565b905081810360a083015261256281866121f5565b905081810360c083015261257681856121f5565b905081810360e083015261258a81846121f5565b90509998505050505050505050565b600060208201905081810360008301526125b28161225f565b9050919050565b600060208201905081810360008301526125d281612282565b9050919050565b600060208201905081810360008301526125f2816122a5565b9050919050565b60006020820190508181036000830152612612816122c8565b9050919050565b60006020820190508181036000830152612632816122eb565b9050919050565b600060208201905081810360008301526126528161230e565b9050919050565b6000602082019050818103600083015261267281612331565b9050919050565b6000602082019050818103600083015261269281612354565b9050919050565b600060208201905081810360008301526126b281612377565b9050919050565b600060208201905081810360008301526126d28161239a565b9050919050565b600060208201905081810360008301526126f2816123bd565b9050919050565b60006020820190508181036000830152612712816123e0565b9050919050565b600060208201905061272e6000830184612403565b92915050565b600061273e61274f565b905061274a82826129c1565b919050565b6000604051905090565b600067ffffffffffffffff82111561277457612773612b28565b5b61277d82612b6b565b9050602081019050919050565b600067ffffffffffffffff8211156127a5576127a4612b28565b5b6127ae82612b6b565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061282982612943565b915061283483612943565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561286957612868612a6c565b5b828201905092915050565b600061287f82612943565b915061288a83612943565b92508261289a57612899612a9b565b5b828204905092915050565b60006128b082612943565b91506128bb83612943565b9250828210156128ce576128cd612a6c565b5b828203905092915050565b60006128e482612923565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561297a57808201518184015260208101905061295f565b83811115612989576000848401525b50505050565b600060028204905060018216806129a757607f821691505b602082108114156129bb576129ba612aca565b5b50919050565b6129ca82612b6b565b810181811067ffffffffffffffff821117156129e9576129e8612b28565b5b80604052505050565b60006129fd82612943565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a3057612a2f612a6c565b5b600182019050919050565b6000612a4682612943565b9150612a5183612943565b925082612a6157612a60612a9b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b612f13816128d9565b8114612f1e57600080fd5b50565b612f2a816128eb565b8114612f3557600080fd5b50565b612f41816128f7565b8114612f4c57600080fd5b50565b612f5881612943565b8114612f6357600080fd5b5056fea264697066735822122062a01bf3d9f3413c763020c2705b9d617a62cc60f11d62200f54c34837c4fa8464736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80635658ccb6116100a2578063a22cb46511610071578063a22cb465146102f7578063b16060a614610313578063b88d4fde1461031d578063c87b56dd14610339578063e985e9c5146103695761010b565b80635658ccb6146102425780636352211e1461027957806370a08231146102a957806395d89b41146102d95761010b565b80630a786bfc116100de5780630a786bfc146101aa57806323b872dd146101da57806342842e0e146101f65780634cc124a5146102125761010b565b806301ffc9a71461011057806306fdde0314610140578063081812fc1461015e578063095ea7b31461018e575b600080fd5b61012a60048036038101906101259190611ede565b610399565b60405161013791906124b4565b60405180910390f35b61014861047b565b60405161015591906124cf565b60405180910390f35b610178600480360381019061017391906120f2565b61050d565b604051610185919061244d565b60405180910390f35b6101a860048036038101906101a39190611e9e565b610592565b005b6101c460048036038101906101bf9190611f38565b6106aa565b6040516101d191906124cf565b60405180910390f35b6101f460048036038101906101ef9190611d88565b610777565b005b610210600480360381019061020b9190611d88565b6107d7565b005b61022c60048036038101906102279190611f94565b6107f7565b6040516102399190612719565b60405180910390f35b61025c600480360381019061025791906120f2565b610936565b6040516102709897969594939291906124f1565b60405180910390f35b610293600480360381019061028e91906120f2565b610cae565b6040516102a0919061244d565b60405180910390f35b6102c360048036038101906102be9190611d1b565b610d60565b6040516102d09190612719565b60405180910390f35b6102e1610e18565b6040516102ee91906124cf565b60405180910390f35b610311600480360381019061030c9190611e5e565b610eaa565b005b61031b610ec0565b005b61033760048036038101906103329190611ddb565b610f71565b005b610353600480360381019061034e91906120f2565b610fd3565b60405161036091906124cf565b60405180910390f35b610383600480360381019061037e9190611d48565b61107a565b60405161039091906124b4565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061046457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061047457506104738261110e565b5b9050919050565b60606000805461048a9061298f565b80601f01602080910402602001604051908101604052809291908181526020018280546104b69061298f565b80156105035780601f106104d857610100808354040283529160200191610503565b820191906000526020600020905b8154815290600101906020018083116104e657829003601f168201915b5050505050905090565b600061051882611178565b610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90612699565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061059d82610cae565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561060e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610605906126d9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661062d6111e4565b73ffffffffffffffffffffffffffffffffffffffff16148061065c575061065b816106566111e4565b61107a565b5b61069b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069290612639565b60405180910390fd5b6106a583836111ec565b505050565b606060005b60065481101561073757600760008281526020019081526020016000206000016040516106dc9190612412565b6040518091039020848051906020012014801561070e5750600760008281526020019081526020016000206001015483145b156107245761071c816112a5565b915050610771565b808061072f906129f2565b9150506106af565b506040518060400160405280600581526020017f66616c736500000000000000000000000000000000000000000000000000000081525090505b92915050565b6107886107826111e4565b82611406565b6107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be906126f9565b60405180910390fd5b6107d28383836114e4565b505050565b6107f283838360405180602001604052806000815250610f71565b505050565b60006040518061010001604052808a8152602001898152602001888152602001878152602001868152602001858152602001848152602001838152506007600060065481526020019081526020016000206000820151816000019080519060200190610864929190611aef565b5060208201518160010155604082015181600201556060820151816003019080519060200190610895929190611aef565b5060808201518160040190805190602001906108b2929190611aef565b5060a08201518160050190805190602001906108cf929190611aef565b5060c08201518160060190805190602001906108ec929190611aef565b5060e0820151816007019080519060200190610909929190611aef565b5090505060066000815480929190610920906129f2565b9190505550600654905098975050505050505050565b60076020528060005260406000206000915090508060000180546109599061298f565b80601f01602080910402602001604051908101604052809291908181526020018280546109859061298f565b80156109d25780601f106109a7576101008083540402835291602001916109d2565b820191906000526020600020905b8154815290600101906020018083116109b557829003601f168201915b5050505050908060010154908060020154908060030180546109f39061298f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1f9061298f565b8015610a6c5780601f10610a4157610100808354040283529160200191610a6c565b820191906000526020600020905b815481529060010190602001808311610a4f57829003601f168201915b505050505090806004018054610a819061298f565b80601f0160208091040260200160405190810160405280929190818152602001828054610aad9061298f565b8015610afa5780601f10610acf57610100808354040283529160200191610afa565b820191906000526020600020905b815481529060010190602001808311610add57829003601f168201915b505050505090806005018054610b0f9061298f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3b9061298f565b8015610b885780601f10610b5d57610100808354040283529160200191610b88565b820191906000526020600020905b815481529060010190602001808311610b6b57829003601f168201915b505050505090806006018054610b9d9061298f565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc99061298f565b8015610c165780601f10610beb57610100808354040283529160200191610c16565b820191906000526020600020905b815481529060010190602001808311610bf957829003601f168201915b505050505090806007018054610c2b9061298f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c579061298f565b8015610ca45780601f10610c7957610100808354040283529160200191610ca4565b820191906000526020600020905b815481529060010190602001808311610c8757829003601f168201915b5050505050905088565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4e90612679565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc890612659565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610e279061298f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e539061298f565b8015610ea05780601f10610e7557610100808354040283529160200191610ea0565b820191906000526020600020905b815481529060010190602001808311610e8357829003601f168201915b5050505050905090565b610ebc610eb56111e4565b838361174b565b5050565b600060068190555060005b600654811015610f6e576007600082815260200190815260200160002060008082016000610ef99190611b75565b60018201600090556002820160009055600382016000610f199190611b75565b600482016000610f299190611b75565b600582016000610f399190611b75565b600682016000610f499190611b75565b600782016000610f599190611b75565b50508080610f66906129f2565b915050610ecb565b50565b610f82610f7c6111e4565b83611406565b610fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb8906126f9565b60405180910390fd5b610fcd848484846118b8565b50505050565b6060610fde82611178565b61101d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611014906126b9565b60405180910390fd5b6000611027611914565b905060008151116110475760405180602001604052806000815250611072565b80611051846112a5565b604051602001611062929190612429565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661125f83610cae565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060008214156112ed576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611401565b600082905060005b6000821461131f578080611308906129f2565b915050600a826113189190612874565b91506112f5565b60008167ffffffffffffffff81111561133b5761133a612b28565b5b6040519080825280601f01601f19166020018201604052801561136d5781602001600182028036833780820191505090505b5090505b600085146113fa5760018261138691906128a5565b9150600a856113959190612a3b565b60306113a1919061281e565b60f81b8183815181106113b7576113b6612af9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856113f39190612874565b9450611371565b8093505050505b919050565b600061141182611178565b611450576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144790612619565b60405180910390fd5b600061145b83610cae565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061149d575061149c818561107a565b5b806114db57508373ffffffffffffffffffffffffffffffffffffffff166114c38461050d565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661150482610cae565b73ffffffffffffffffffffffffffffffffffffffff161461155a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611551906125b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c1906125d9565b60405180910390fd5b6115d583838361192b565b6115e06000826111ec565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461163091906128a5565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611687919061281e565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611746838383611930565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b1906125f9565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118ab91906124b4565b60405180910390a3505050565b6118c38484846114e4565b6118cf84848484611935565b61190e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190590612599565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b505050565b505050565b60006119568473ffffffffffffffffffffffffffffffffffffffff16611acc565b15611abf578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261197f6111e4565b8786866040518563ffffffff1660e01b81526004016119a19493929190612468565b602060405180830381600087803b1580156119bb57600080fd5b505af19250505080156119ec57506040513d601f19601f820116820180604052508101906119e99190611f0b565b60015b611a6f573d8060008114611a1c576040519150601f19603f3d011682016040523d82523d6000602084013e611a21565b606091505b50600081511415611a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5e90612599565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611ac4565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611afb9061298f565b90600052602060002090601f016020900481019282611b1d5760008555611b64565b82601f10611b3657805160ff1916838001178555611b64565b82800160010185558215611b64579182015b82811115611b63578251825591602001919060010190611b48565b5b509050611b719190611bb5565b5090565b508054611b819061298f565b6000825580601f10611b935750611bb2565b601f016020900490600052602060002090810190611bb19190611bb5565b5b50565b5b80821115611bce576000816000905550600101611bb6565b5090565b6000611be5611be084612759565b612734565b905082815260208101848484011115611c0157611c00612b5c565b5b611c0c84828561294d565b509392505050565b6000611c27611c228461278a565b612734565b905082815260208101848484011115611c4357611c42612b5c565b5b611c4e84828561294d565b509392505050565b600081359050611c6581612f0a565b92915050565b600081359050611c7a81612f21565b92915050565b600081359050611c8f81612f38565b92915050565b600081519050611ca481612f38565b92915050565b600082601f830112611cbf57611cbe612b57565b5b8135611ccf848260208601611bd2565b91505092915050565b600082601f830112611ced57611cec612b57565b5b8135611cfd848260208601611c14565b91505092915050565b600081359050611d1581612f4f565b92915050565b600060208284031215611d3157611d30612b66565b5b6000611d3f84828501611c56565b91505092915050565b60008060408385031215611d5f57611d5e612b66565b5b6000611d6d85828601611c56565b9250506020611d7e85828601611c56565b9150509250929050565b600080600060608486031215611da157611da0612b66565b5b6000611daf86828701611c56565b9350506020611dc086828701611c56565b9250506040611dd186828701611d06565b9150509250925092565b60008060008060808587031215611df557611df4612b66565b5b6000611e0387828801611c56565b9450506020611e1487828801611c56565b9350506040611e2587828801611d06565b925050606085013567ffffffffffffffff811115611e4657611e45612b61565b5b611e5287828801611caa565b91505092959194509250565b60008060408385031215611e7557611e74612b66565b5b6000611e8385828601611c56565b9250506020611e9485828601611c6b565b9150509250929050565b60008060408385031215611eb557611eb4612b66565b5b6000611ec385828601611c56565b9250506020611ed485828601611d06565b9150509250929050565b600060208284031215611ef457611ef3612b66565b5b6000611f0284828501611c80565b91505092915050565b600060208284031215611f2157611f20612b66565b5b6000611f2f84828501611c95565b91505092915050565b60008060408385031215611f4f57611f4e612b66565b5b600083013567ffffffffffffffff811115611f6d57611f6c612b61565b5b611f7985828601611cd8565b9250506020611f8a85828601611d06565b9150509250929050565b600080600080600080600080610100898b031215611fb557611fb4612b66565b5b600089013567ffffffffffffffff811115611fd357611fd2612b61565b5b611fdf8b828c01611cd8565b9850506020611ff08b828c01611d06565b97505060406120018b828c01611d06565b965050606089013567ffffffffffffffff81111561202257612021612b61565b5b61202e8b828c01611cd8565b955050608089013567ffffffffffffffff81111561204f5761204e612b61565b5b61205b8b828c01611cd8565b94505060a089013567ffffffffffffffff81111561207c5761207b612b61565b5b6120888b828c01611cd8565b93505060c089013567ffffffffffffffff8111156120a9576120a8612b61565b5b6120b58b828c01611cd8565b92505060e089013567ffffffffffffffff8111156120d6576120d5612b61565b5b6120e28b828c01611cd8565b9150509295985092959890939650565b60006020828403121561210857612107612b66565b5b600061211684828501611d06565b91505092915050565b612128816128d9565b82525050565b612137816128eb565b82525050565b6000612148826127d0565b61215281856127e6565b935061216281856020860161295c565b61216b81612b6b565b840191505092915050565b600081546121838161298f565b61218d81866127f7565b945060018216600081146121a857600181146121b9576121ec565b60ff198316865281860193506121ec565b6121c2856127bb565b60005b838110156121e4578154818901526001820191506020810190506121c5565b838801955050505b50505092915050565b6000612200826127db565b61220a8185612802565b935061221a81856020860161295c565b61222381612b6b565b840191505092915050565b6000612239826127db565b6122438185612813565b935061225381856020860161295c565b80840191505092915050565b600061226c603283612802565b915061227782612b7c565b604082019050919050565b600061228f602583612802565b915061229a82612bcb565b604082019050919050565b60006122b2602483612802565b91506122bd82612c1a565b604082019050919050565b60006122d5601983612802565b91506122e082612c69565b602082019050919050565b60006122f8602c83612802565b915061230382612c92565b604082019050919050565b600061231b603883612802565b915061232682612ce1565b604082019050919050565b600061233e602a83612802565b915061234982612d30565b604082019050919050565b6000612361602983612802565b915061236c82612d7f565b604082019050919050565b6000612384602c83612802565b915061238f82612dce565b604082019050919050565b60006123a7602f83612802565b91506123b282612e1d565b604082019050919050565b60006123ca602183612802565b91506123d582612e6c565b604082019050919050565b60006123ed603183612802565b91506123f882612ebb565b604082019050919050565b61240c81612943565b82525050565b600061241e8284612176565b915081905092915050565b6000612435828561222e565b9150612441828461222e565b91508190509392505050565b6000602082019050612462600083018461211f565b92915050565b600060808201905061247d600083018761211f565b61248a602083018661211f565b6124976040830185612403565b81810360608301526124a9818461213d565b905095945050505050565b60006020820190506124c9600083018461212e565b92915050565b600060208201905081810360008301526124e981846121f5565b905092915050565b600061010082019050818103600083015261250c818b6121f5565b905061251b602083018a612403565b6125286040830189612403565b818103606083015261253a81886121f5565b9050818103608083015261254e81876121f5565b905081810360a083015261256281866121f5565b905081810360c083015261257681856121f5565b905081810360e083015261258a81846121f5565b90509998505050505050505050565b600060208201905081810360008301526125b28161225f565b9050919050565b600060208201905081810360008301526125d281612282565b9050919050565b600060208201905081810360008301526125f2816122a5565b9050919050565b60006020820190508181036000830152612612816122c8565b9050919050565b60006020820190508181036000830152612632816122eb565b9050919050565b600060208201905081810360008301526126528161230e565b9050919050565b6000602082019050818103600083015261267281612331565b9050919050565b6000602082019050818103600083015261269281612354565b9050919050565b600060208201905081810360008301526126b281612377565b9050919050565b600060208201905081810360008301526126d28161239a565b9050919050565b600060208201905081810360008301526126f2816123bd565b9050919050565b60006020820190508181036000830152612712816123e0565b9050919050565b600060208201905061272e6000830184612403565b92915050565b600061273e61274f565b905061274a82826129c1565b919050565b6000604051905090565b600067ffffffffffffffff82111561277457612773612b28565b5b61277d82612b6b565b9050602081019050919050565b600067ffffffffffffffff8211156127a5576127a4612b28565b5b6127ae82612b6b565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061282982612943565b915061283483612943565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561286957612868612a6c565b5b828201905092915050565b600061287f82612943565b915061288a83612943565b92508261289a57612899612a9b565b5b828204905092915050565b60006128b082612943565b91506128bb83612943565b9250828210156128ce576128cd612a6c565b5b828203905092915050565b60006128e482612923565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561297a57808201518184015260208101905061295f565b83811115612989576000848401525b50505050565b600060028204905060018216806129a757607f821691505b602082108114156129bb576129ba612aca565b5b50919050565b6129ca82612b6b565b810181811067ffffffffffffffff821117156129e9576129e8612b28565b5b80604052505050565b60006129fd82612943565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a3057612a2f612a6c565b5b600182019050919050565b6000612a4682612943565b9150612a5183612943565b925082612a6157612a60612a9b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b612f13816128d9565b8114612f1e57600080fd5b50565b612f2a816128eb565b8114612f3557600080fd5b50565b612f41816128f7565b8114612f4c57600080fd5b50565b612f5881612943565b8114612f6357600080fd5b5056fea264697066735822122062a01bf3d9f3413c763020c2705b9d617a62cc60f11d62200f54c34837c4fa8464736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1607,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_certificate_ids",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1612,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_certificate_uris",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(certificate_struct)1605_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(certificate_struct)1605_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CeloERC721.certificate_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(certificate_struct)1605_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(certificate_struct)1605_storage": {
        "encoding": "inplace",
        "label": "struct CeloERC721.certificate_struct",
        "members": [
          {
            "astId": 1590,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1592,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "number",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1594,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1596,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "location",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1598,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1600,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "collection",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1602,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "date",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1604,
            "contract": "contracts/CeloERC721.sol:CeloERC721",
            "label": "image",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}